package olc1_vj24_3363565520917.backend.analisis;

//importaciones 
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_vj24_3363565520917.backend.abstracto.Instruccion;
import olc1_vj24_3363565520917.backend.simbolo.Tipo;
import olc1_vj24_3363565520917.backend.simbolo.tipoDato;
import olc1_vj24_3363565520917.backend.excepciones.Errores;
import java.util.HashMap;

//instrucciones
import olc1_vj24_3363565520917.backend.instrucciones.Print;
import olc1_vj24_3363565520917.backend.instrucciones.Declaracion;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVar;
import olc1_vj24_3363565520917.backend.instrucciones.If;
import olc1_vj24_3363565520917.backend.instrucciones.IfElse;
import olc1_vj24_3363565520917.backend.instrucciones.IfElseIf;
import olc1_vj24_3363565520917.backend.instrucciones.Caso;
import olc1_vj24_3363565520917.backend.instrucciones.Match;
import olc1_vj24_3363565520917.backend.instrucciones.For;
import olc1_vj24_3363565520917.backend.instrucciones.While;
import olc1_vj24_3363565520917.backend.instrucciones.DoWhile;
import olc1_vj24_3363565520917.backend.instrucciones.Break;
import olc1_vj24_3363565520917.backend.instrucciones.Continue;
import olc1_vj24_3363565520917.backend.instrucciones.Metodo;
import olc1_vj24_3363565520917.backend.instrucciones.Append;
import olc1_vj24_3363565520917.backend.instrucciones.Remove;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionList;
import olc1_vj24_3363565520917.backend.instrucciones.StartWith;
import olc1_vj24_3363565520917.backend.instrucciones.Llamada;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVector;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionVector;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionStruct;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionStruct;
import olc1_vj24_3363565520917.backend.instrucciones.InstanciaStruct;

//expresiones
import olc1_vj24_3363565520917.backend.expresiones.Nativo;
import olc1_vj24_3363565520917.backend.expresiones.Aritmeticas;
import olc1_vj24_3363565520917.backend.expresiones.Relacionales;
import olc1_vj24_3363565520917.backend.expresiones.Logicos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresAritmeticos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresRelacionales;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresLogicos;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVar;
import olc1_vj24_3363565520917.backend.expresiones.Casteo;
import olc1_vj24_3363565520917.backend.expresiones.Incremento;
import olc1_vj24_3363565520917.backend.expresiones.Decremento;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVector;
import olc1_vj24_3363565520917.backend.expresiones.AccesoStruct;
import olc1_vj24_3363565520917.backend.expresiones.Return;

//definiendo el parser
parser code
{:
    scanner s;
    parser(scanner s) {this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s ){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }
:}

action code 
{:   
:}
                                                                       
terminal String CADENA, ENTERO, DECIMAL, CARACTER, BOOLEANO, ID, MUTABILIDAD;
terminal FININSTRUCCION, IMPRIMIR, MAS, MENOS, MULTIPLICAR, DIVIDIR, PAR1, PAR2, UMENOS, INT, DOUBLE, BOOL;
terminal CHAR, STRING, IF, ELSE, MATCH, WHILE, FOR, DO, IGUALACION, POTENCIA, DIFERENCIACION, MENORIGUALQUE;
terminal MAYORIGUALQUE, OR, AND, XOR, NOT, INCREMENTO, DECREMENTO, IGUAL, MODULO, DEFAULT, MENORQUE, MAYORQUE, DOSPUNTOS;
terminal LLAVE1, LLAVE2, CORCH1, CORCH2, PUNTO, COMA;
terminal LIST, NEW, APPEND, REMOVE, STRUCT, RETURN, VOID, ROUND, LENGTH, TOSTRING, FIND, STARTWITH; 
terminal String BREAK, CONTINUE;

nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion EXPRESION, DECLARACION, ASIGNACION, IMPRESION;
nonterminal Instruccion SIF;
nonterminal Instruccion SMATCH;
nonterminal Instruccion CFOR, ACTUALIZA_FOR;
nonterminal Instruccion CWHILE;
nonterminal Instruccion CDOWHILE;
nonterminal LinkedList<Caso> CASOS;
nonterminal Caso CASO;
nonterminal Tipo TIPOS;
nonterminal Instruccion BREAKK, CONTINUEE;
nonterminal Instruccion METODO;
nonterminal LinkedList<HashMap> PARAMS;
nonterminal Instruccion START;
nonterminal LinkedList<Instruccion> PARAMSCALL;
nonterminal Instruccion DECLARACION_LIST, ASIGNACION_LIST, NATIVO_LIST;
nonterminal Instruccion DECLARACION_VECTOR, ASIGNACION_VECTOR;
nonterminal LinkedList<Instruccion> LISTAVALORES1;
nonterminal LinkedList<LinkedList<Instruccion>> LISTAVALORES2;
nonterminal Instruccion DECLARACION_STRUCT, INSTANCIA_STRUCT, ASIGNACION_STRUCT;
nonterminal LinkedList<HashMap> LISTA_STRUCT, VALORES_STRUCT;
nonterminal Instruccion LLAMADA;
nonterminal Instruccion RETORNO;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUALACION, DIFERENCIACION, MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE;
precedence left MAS, MENOS;
precedence left MULTIPLICAR, DIVIDIR, MODULO;
precedence nonassoc POTENCIA;
precedence right UMENOS;      

start with INICIO;                                                      

INICIO ::= INSTRUCCIONES:a  {:      RESULT=a;      :}  
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b   {:  RESULT = a; RESULT.add(b);                     :}
                | INSTRUCCION:a                   {:  RESULT = new LinkedList<>(); RESULT.add(a);    :}
;

INSTRUCCION ::= IMPRESION:a                       {:    RESULT=a;    :}
            | DECLARACION:a                       {:    RESULT=a;    :}
            | ASIGNACION:a                        {:    RESULT=a;    :}
            | SIF:a                               {:    RESULT=a;    :}
            | CFOR:a                              {:    RESULT=a;    :}
            | SMATCH:a                            {:    RESULT=a;    :}
            | CWHILE:a                            {:    RESULT=a;    :}
            | CDOWHILE:a                          {:    RESULT=a;    :}
            | BREAKK:a                            {:    RESULT=a;    :}
            | CONTINUEE:a                         {:    RESULT=a;    :}
            | METODO:a                            {:    RESULT=a;    :}
            | START:a                             {:    RESULT=a;    :}
            | DECLARACION_LIST:a                  {:    RESULT=a;    :}
            | ASIGNACION_LIST:a                   {:    RESULT=a;    :}
            | NATIVO_LIST:a                       {:    RESULT=a;    :}
            | DECLARACION_VECTOR:a                {:    RESULT=a;    :}
            | ASIGNACION_VECTOR:a                 {:    RESULT=a;    :}
            | DECLARACION_STRUCT:a                {:    RESULT=a;    :}
            | INSTANCIA_STRUCT:a                  {:    RESULT=a;    :}
            | ASIGNACION_STRUCT:a                 {:    RESULT=a;    :}
            | LLAMADA:a  FININSTRUCCION           {:    RESULT=a;    :}
            | RETORNO:a                           {:    RESULT=a;    :}
            | error FININSTRUCCION
            | error        
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FININSTRUCCION   {:    RESULT = new Print(aleft, aright, a);     :}
;

DECLARACION ::= MUTABILIDAD:a ID:b DOSPUNTOS TIPOS:c IGUAL EXPRESION:d FININSTRUCCION {:  RESULT = new Declaracion(c, aleft, aright, b, d, a);  :}           
            | MUTABILIDAD:a ID:b DOSPUNTOS TIPOS:c FININSTRUCCION                     {:  RESULT = new Declaracion(c, aleft, aright, b, a);     :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FININSTRUCCION     {:  RESULT = new AsignacionVar(a, b, aleft, aright);       :}
            | EXPRESION:a INCREMENTO FININSTRUCCION      {:  RESULT = new Incremento(aleft, aright, a);             :}
            | EXPRESION:a DECREMENTO FININSTRUCCION      {:  RESULT = new Decremento(aleft, aright, a);             :}
;

METODO ::= TIPOS:a ID:b PAR1 PARAMS:p PAR2 LLAVE1 INSTRUCCIONES:c LLAVE2    {:   RESULT = new Metodo(a, aleft, aright, b, p, c);     :}
         | TIPOS:a ID:b PAR1 PAR2 LLAVE1 INSTRUCCIONES:c LLAVE2             {:   RESULT = new Metodo(a, aleft, aright, b, new LinkedList<HashMap>(),c);   :}         
;

RETORNO ::= RETURN EXPRESION:a FININSTRUCCION {:    RESULT = new Return(aleft, aright, a);    :}
;

PARAMS ::= PARAMS:a COMA TIPOS:b ID:c   {:  RESULT = a;
                                            var hm2 = new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);    :}

         | TIPOS:a ID:b                 {:  RESULT = new LinkedList<HashMap>();
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id", b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);     :}
;

START ::= STARTWITH ID:a PAR1 PARAMSCALL:b PAR2 FININSTRUCCION      {:  RESULT = new StartWith(aleft, aright, a, b);   :}
        | STARTWITH ID:a PAR1 PAR2 FININSTRUCCION                   {:  RESULT = new StartWith(aleft, aright, a, new LinkedList<Instruccion>());       :}
;

LLAMADA ::= ID:a PAR1 PARAMSCALL:b PAR2               {:  RESULT = new Llamada(aleft, aright, a, b);     :}
          | ID:a PAR1 PAR2                            {:  RESULT = new Llamada(aleft, aright, a, new LinkedList<Instruccion>());     :}
;

PARAMSCALL ::= PARAMSCALL:a COMA EXPRESION:e    {:  RESULT = a;
                                                    RESULT.add(e);    
                                                :}
             | EXPRESION:a                      {:  RESULT = new LinkedList<Instruccion>();
                                                    RESULT.add(a);  
                                                :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2                                    {:  RESULT = new If(aleft, aright, a, b);            :} 
    |   IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2 {:  RESULT = new IfElse(aleft, aright, a, b, c);     :}   
    |   IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE SIF:c                         {:  RESULT = new IfElseIf(aleft, aright, a, b, c);   :}            
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FININSTRUCCION ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2 {:  RESULT = new For(aleft, aright, a, b, c, d);    :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b      {:  RESULT = new AsignacionVar(a, b, aleft, aright);    :}
                | EXPRESION:a INCREMENTO      {:  RESULT = new Incremento(aleft, aright, a);          :}
                | EXPRESION:a DECREMENTO      {:  RESULT = new Decremento(aleft, aright, a);          :}
;

BREAKK ::= BREAK:a FININSTRUCCION         {:   RESULT = new Break(aleft, aright);   :}
;

CONTINUEE ::= CONTINUE:a FININSTRUCCION   {:    RESULT = new Continue(aleft, aright);        :}
;

CWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2    {:  RESULT = new While(aleft, aright, a, b);   :}
;

CDOWHILE ::= DO LLAVE1 INSTRUCCIONES:a LLAVE2 WHILE PAR1 EXPRESION:b PAR2 FININSTRUCCION        {:    RESULT = new DoWhile(aleft, aright, a, b);   :}
;

SMATCH ::= MATCH EXPRESION:a LLAVE1 CASOS:b DEFAULT:c LLAVE2 {:     RESULT = new Match(aleft, aright, a, b, (Caso) c);       :} //cuando hay un match completo
        |  MATCH EXPRESION:a LLAVE1 CASOS:b LLAVE2           {:     RESULT = new Match(aleft, aright, a, b, null);           :} //cuando hay un match solo con casos
        |  MATCH EXPRESION:a LLAVE1 DEFAULT:c LLAVE2         {:     RESULT = new Match(aleft, aright, a, new LinkedList<Caso>(), (Caso) c); :}//cuando hay un match solo con default
;

CASOS ::= CASOS:a CASO:b      {:      RESULT = a; RESULT.add(b);                      :}//agregando el caso a la lista de casos
        | CASO:a              {:      RESULT = new LinkedList<>(); RESULT.add(a);     :}//creando lista de casos con un caso
;

CASO ::= EXPRESION:a IGUAL MAYORQUE LLAVE1 INSTRUCCIONES:b LLAVE2    {:      RESULT = new Caso(a, b, true);        :}//creando un caso, con sus instrucciones 
        | DEFAULT IGUAL MAYORQUE LLAVE1 INSTRUCCIONES:b LLAVE2       {:      RESULT = new Caso(null, b, false);    :}//crea un caso default, con sus instrucciones        
;

DECLARACION_LIST ::= LIST MENORQUE TIPOS:a MAYORQUE ID:b IGUAL NEW LIST PAR1 PAR2 FININSTRUCCION        {:      RESULT = new DeclaracionList(a, aleft, aright, b);         :}
;

NATIVO_LIST ::= ID:a PUNTO APPEND PAR1 EXPRESION:b PAR2 FININSTRUCCION                  {:      RESULT = new Append(aleft, aright, a, b);              :}
              | ID:a PUNTO REMOVE PAR1 EXPRESION:b PAR2 FININSTRUCCION                  {:      RESULT = new Remove(aleft, aright, a, b);              :} 
;

DECLARACION_VECTOR ::= MUTABILIDAD:a ID:b DOSPUNTOS TIPOS:c CORCH1 CORCH2 IGUAL CORCH1 LISTAVALORES1:d CORCH2 FININSTRUCCION      
                                            {:  RESULT = new DeclaracionVector(c, aleft, aright, a, b, 1, d);   :} //vector 1D
                     | MUTABILIDAD:a ID:b DOSPUNTOS TIPOS:c CORCH1 CORCH2 CORCH1 CORCH2 IGUAL CORCH1 LISTAVALORES2:d CORCH2 FININSTRUCCION
                                            {:  RESULT = new DeclaracionVector(c, aleft, aright, a, b, d);   :} //vector 2D
;

LISTAVALORES1 ::= LISTAVALORES1:a COMA EXPRESION:b      {:   RESULT = a; 
                                                             RESULT.add(b);   :}
            | EXPRESION:a                               {:   RESULT = new LinkedList<Instruccion>(); 
                                                             RESULT.add(a);    :}
;

LISTAVALORES2 ::= LISTAVALORES2:a COMA CORCH1 LISTAVALORES1:b CORCH2 {:     RESULT = a; RESULT.add(b);  :}
                | CORCH1 LISTAVALORES1:a CORCH2                        {:     RESULT = new LinkedList<LinkedList<Instruccion>>();     RESULT.add(a);  :}
;

ASIGNACION_VECTOR ::= ID:a CORCH1 EXPRESION:b CORCH2 IGUAL EXPRESION:c FININSTRUCCION   {:  RESULT = new AsignacionVector(aleft, aright, a, b, null, c);    :}
                    | ID:a CORCH1 EXPRESION:b CORCH2 CORCH1 EXPRESION:c CORCH2 IGUAL EXPRESION:d FININSTRUCCION     {:  RESULT = new AsignacionVector(aleft, aright, a, b, c, d);    :}    
;

DECLARACION_STRUCT ::= STRUCT LLAVE1 LISTA_STRUCT:a LLAVE2 ID:b FININSTRUCCION {:    RESULT = new DeclaracionStruct(new Tipo(tipoDato.STRUCT), aleft, aright, b, a);   :}
;

LISTA_STRUCT ::= LISTA_STRUCT:a ID:b DOSPUNTOS TIPOS:c FININSTRUCCION   {:  RESULT = a;
                                                                            var hm2 = new HashMap<String, Object>();
                                                                            hm2.put("id", b);
                                                                            hm2.put("tipo", c);
                                                                            hm2.put("valor", null);
                                                                            RESULT.add(hm2);
                                                                        :}
               | ID:a DOSPUNTOS TIPOS:b FININSTRUCCION                  {:  RESULT = new LinkedList<HashMap>();
                                                                            var hm = new HashMap<String, Object>();
                                                                            hm.put("id", a);
                                                                            hm.put("tipo", b);
                                                                            hm.put("valor", null);
                                                                            RESULT.add(hm);
                                                                        :}
;

INSTANCIA_STRUCT ::= MUTABILIDAD:a ID:b DOSPUNTOS ID:c IGUAL LLAVE1 VALORES_STRUCT:d LLAVE2 FININSTRUCCION
                        {:  RESULT = new InstanciaStruct(aleft, aright, a, b, c, d);     :}
;

VALORES_STRUCT ::= VALORES_STRUCT:a ID:b DOSPUNTOS EXPRESION:c FININSTRUCCION   {:  RESULT = a;
                                                                                    var hm2 = new HashMap<String, Object>();
                                                                                    hm2.put("id", b);
                                                                                    hm2.put("valor", c);
                                                                                    RESULT.add(hm2);
                                                                                :}
                | ID:a DOSPUNTOS EXPRESION:b FININSTRUCCION                     {:  RESULT = new LinkedList<HashMap>();
                                                                                    var hm = new HashMap<String, Object>();
                                                                                    hm.put("id", a);
                                                                                    hm.put("valor", b);
                                                                                    RESULT.add(hm);
                                                                                :}
;

ASIGNACION_STRUCT ::= ID:a PUNTO ID:b IGUAL EXPRESION:c FININSTRUCCION  {:  RESULT = new AsignacionStruct(aleft, aright, a, b, c);    :}
;
 
EXPRESION ::= MENOS EXPRESION:a                       {:  RESULT = new Aritmeticas(aleft, aright, OperadoresAritmeticos.NEGACION, a);                   :}%prec UMENOS
            | EXPRESION:a MAS EXPRESION:b             {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.SUMA);                    :}
            | EXPRESION:a MENOS EXPRESION:b           {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.RESTA);                   :}
            | EXPRESION:a MULTIPLICAR EXPRESION:b     {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MULTIPLICACION);          :}
            | EXPRESION:a DIVIDIR EXPRESION:b         {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.DIVISION);                :}
            | EXPRESION:a POTENCIA EXPRESION:b        {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.POTENCIA);                :}
            | EXPRESION:a MODULO EXPRESION:b          {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MODULO);                  :}            

            | EXPRESION:a IGUALACION EXPRESION:b      {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.IGUALACION);            :}
            | EXPRESION:a DIFERENCIACION EXPRESION:b  {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.DIFERENCIACION);        :}
            | EXPRESION:a MENORQUE EXPRESION:b        {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORQUE);              :}
            | EXPRESION:a MENORIGUALQUE EXPRESION:b   {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORIGUALQUE);         :}
            | EXPRESION:a MAYORQUE EXPRESION:b        {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORQUE);              :}
            | EXPRESION:a MAYORIGUALQUE EXPRESION:b   {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORIGUALQUE);         :}

            | NOT EXPRESION:a                         {:  RESULT = new Logicos(aleft, aright, OperadoresLogicos.NOT, a);                                :}%prec NOT
            | EXPRESION:a OR EXPRESION:b              {:  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.OR);                              :}
            | EXPRESION:a AND EXPRESION:b             {:  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.AND);                             :}
            | EXPRESION:a XOR EXPRESION:b             {:  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.XOR);                             :}

            | PAR1 EXPRESION:a PAR2                   {:  RESULT = a;                                                                                   :}

            | PAR1 TIPOS:a PAR2 EXPRESION:b           {:  RESULT = new Casteo(a, aleft, aright, b);                                                     :}
            
            | ENTERO:a                                {:  RESULT = new Nativo(new Tipo(tipoDato.ENTERO), aleft, aright, Integer.parseInt(a));           :}
            | DECIMAL:a                               {:  RESULT = new Nativo(new Tipo(tipoDato.DECIMAL), aleft, aright, new Double(a));                :}
            | CADENA:a                                {:  RESULT = new Nativo(new Tipo(tipoDato.CADENA), aleft, aright, a);                             :}
            | CARACTER:a                              {:  RESULT = new Nativo(new Tipo(tipoDato.CARACTER), aleft, aright, a);                           :}
            | BOOLEANO:a                              {:  RESULT = new Nativo(new Tipo(tipoDato.BOOLEANO), aleft, aright, Boolean.parseBoolean(a));     :}

            | ID:a                                                          {:  RESULT = new AccesoVar(aleft, aright, a);                               :}
            | ID:a CORCH1 EXPRESION:b CORCH2                                {:  RESULT = new AccesoVector(aleft, aright, a, b, null);                   :}
            | ID:a CORCH1 EXPRESION:b CORCH2 CORCH1 EXPRESION:c CORCH2      {:  RESULT = new AccesoVector(aleft, aright, a, b, c);                      :}
            | ID:a PUNTO ID:b                                               {:  RESULT = new AccesoStruct(aleft, aright, a, b);                         :}
            | LLAMADA:a                                                     {:  RESULT = a;                                                             :}                                           
;

TIPOS ::= INT       {:  RESULT = new Tipo(tipoDato.ENTERO);     :}
        | DOUBLE    {:  RESULT = new Tipo(tipoDato.DECIMAL);    :}
        | STRING    {:  RESULT = new Tipo(tipoDato.CADENA);     :}
        | CHAR      {:  RESULT = new Tipo(tipoDato.CARACTER);   :}
        | BOOL      {:  RESULT = new Tipo(tipoDato.BOOLEANO);   :}
        | VOID      {:  RESULT = new Tipo(tipoDato.VOID);       :}
        | STRUCT    {:  RESULT = new Tipo(tipoDato.STRUCT);     :}
;