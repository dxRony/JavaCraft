
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1_vj24_3363565520917.backend.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_vj24_3363565520917.backend.abstracto.Instruccion;
import olc1_vj24_3363565520917.backend.simbolo.Tipo;
import olc1_vj24_3363565520917.backend.simbolo.tipoDato;
import olc1_vj24_3363565520917.backend.excepciones.Errores;
import java.util.HashMap;
import olc1_vj24_3363565520917.backend.instrucciones.Print;
import olc1_vj24_3363565520917.backend.instrucciones.Declaracion;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVar;
import olc1_vj24_3363565520917.backend.instrucciones.If;
import olc1_vj24_3363565520917.backend.instrucciones.IfElse;
import olc1_vj24_3363565520917.backend.instrucciones.IfElseIf;
import olc1_vj24_3363565520917.backend.instrucciones.Caso;
import olc1_vj24_3363565520917.backend.instrucciones.Match;
import olc1_vj24_3363565520917.backend.instrucciones.For;
import olc1_vj24_3363565520917.backend.instrucciones.While;
import olc1_vj24_3363565520917.backend.instrucciones.DoWhile;
import olc1_vj24_3363565520917.backend.instrucciones.Break;
import olc1_vj24_3363565520917.backend.instrucciones.Continue;
import olc1_vj24_3363565520917.backend.instrucciones.Metodo;
import olc1_vj24_3363565520917.backend.instrucciones.Append;
import olc1_vj24_3363565520917.backend.instrucciones.Remove;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionList;
import olc1_vj24_3363565520917.backend.instrucciones.StartWith;
import olc1_vj24_3363565520917.backend.instrucciones.Llamada;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVector;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionVector;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionStruct;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionStruct;
import olc1_vj24_3363565520917.backend.instrucciones.InstanciaStruct;
import olc1_vj24_3363565520917.backend.expresiones.Nativo;
import olc1_vj24_3363565520917.backend.expresiones.Aritmeticas;
import olc1_vj24_3363565520917.backend.expresiones.Relacionales;
import olc1_vj24_3363565520917.backend.expresiones.Logicos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresAritmeticos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresRelacionales;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresLogicos;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVar;
import olc1_vj24_3363565520917.backend.expresiones.Casteo;
import olc1_vj24_3363565520917.backend.expresiones.Incremento;
import olc1_vj24_3363565520917.backend.expresiones.Decremento;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVector;
import olc1_vj24_3363565520917.backend.expresiones.AccesoStruct;
import olc1_vj24_3363565520917.backend.expresiones.Return;
import olc1_vj24_3363565520917.backend.expresiones.Round;
import olc1_vj24_3363565520917.backend.expresiones.ToString;
import olc1_vj24_3363565520917.backend.expresiones.Length;
import olc1_vj24_3363565520917.backend.expresiones.Find;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\010\007\000\002\006\011\000\002\006\007" +
    "\000\002\007\006\000\002\007\005\000\002\007\005\000" +
    "\002\024\012\000\002\024\011\000\002\046\005\000\002" +
    "\025\006\000\002\025\004\000\002\026\010\000\002\026" +
    "\007\000\002\045\010\000\002\044\006\000\002\044\005" +
    "\000\002\027\005\000\002\027\003\000\002\011\011\000" +
    "\002\011\015\000\002\011\013\000\002\013\014\000\002" +
    "\014\005\000\002\014\004\000\002\014\004\000\002\022" +
    "\004\000\002\023\004\000\002\015\011\000\002\016\013" +
    "\000\002\012\010\000\002\012\007\000\002\012\007\000" +
    "\002\017\004\000\002\017\003\000\002\020\010\000\002" +
    "\020\010\000\002\030\015\000\002\032\011\000\002\033" +
    "\015\000\002\033\017\000\002\035\005\000\002\035\003" +
    "\000\002\036\007\000\002\036\005\000\002\034\011\000" +
    "\002\034\014\000\002\037\010\000\002\042\007\000\002" +
    "\042\006\000\002\040\013\000\002\043\007\000\002\043" +
    "\006\000\002\041\010\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\006\000\002\005\011\000\002\005\005" +
    "\000\002\005\003\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\010\000\002\005\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\102\003\045\004\046\005\013\006\041\007" +
    "\031\010\067\011\040\012\034\014\011\016\050\021\005" +
    "\024\020\025\015\026\033\027\007\030\070\031\035\033" +
    "\025\034\062\035\023\036\077\047\027\066\063\072\072" +
    "\073\042\074\055\075\076\076\075\077\053\101\044\102" +
    "\052\103\017\001\002\000\106\002\uffee\003\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\014" +
    "\uffee\016\uffee\021\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\033\uffee\034\uffee\035\uffee\036\uffee\047" +
    "\uffee\061\uffee\066\uffee\072\uffee\073\uffee\074\uffee\075\uffee" +
    "\076\uffee\077\uffee\101\uffee\102\uffee\103\uffee\001\002\000" +
    "\050\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\024\020\025\015\026\033\027\007\030" +
    "\070\047\027\072\224\074\055\075\076\076\075\077\053" +
    "\001\002\000\004\011\u0137\001\002\000\016\011\uff8a\013" +
    "\uff8a\022\uff8a\052\uff8a\056\uff8a\062\uff8a\001\002\000\106" +
    "\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\021\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\047\ufff8\061\ufff8\066\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\001\002\000\004\021\u0133\001\002\000\106" +
    "\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\014\ufff5\016\ufff5\021\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\047\ufff5\061\ufff5\066\ufff5\072\ufff5" +
    "\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\101\ufff5\102" +
    "\ufff5\103\ufff5\001\002\000\060\013\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\022\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\055\uff9c\056\uff9c\060\uff9c\063\uff9c\065" +
    "\uff9c\001\002\000\106\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\016" +
    "\ufff3\021\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\047\ufff3\061" +
    "\ufff3\066\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\101\ufff3\102\ufff3\103\ufff3\001\002\000\016\011" +
    "\uff8c\013\uff8c\022\uff8c\052\uff8c\056\uff8c\062\uff8c\001\002" +
    "\000\106\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\014\uffed\016\uffed\021\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\047\uffed\061\uffed\066\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\101" +
    "\uffed\102\uffed\103\uffed\001\002\000\004\013\u0132\001\002" +
    "\000\016\011\uff8d\013\uff8d\022\uff8d\052\uff8d\056\uff8d\062" +
    "\uff8d\001\002\000\106\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\016" +
    "\ufffe\021\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\047\ufffe\061" +
    "\ufffe\066\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\101\ufffe\102\ufffe\103\ufffe\001\002\000\106\002" +
    "\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\016\ufff4\021\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\047\ufff4\061\ufff4\066\ufff4\072\ufff4\073" +
    "\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4" +
    "\103\ufff4\001\002\000\004\021\u0122\001\002\000\104\002" +
    "\000\003\045\004\046\005\013\006\041\007\031\010\067" +
    "\011\040\012\034\014\011\016\050\021\005\024\020\025" +
    "\015\026\033\027\007\030\070\031\035\033\025\034\062" +
    "\035\023\036\077\047\027\066\063\072\072\073\042\074" +
    "\055\075\076\076\075\077\053\101\044\102\052\103\017" +
    "\001\002\000\032\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\075\076\076\075" +
    "\077\053\001\002\000\106\002\uffec\003\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\016\uffec\021\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec\047\uffec" +
    "\061\uffec\066\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076" +
    "\uffec\077\uffec\101\uffec\102\uffec\103\uffec\001\002\000\032" +
    "\004\046\005\013\006\041\007\031\010\067\011\107\016" +
    "\050\021\005\047\027\075\076\076\075\077\053\001\002" +
    "\000\106\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\016\ufff7\021\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\047\ufff7\061\ufff7\066\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\101" +
    "\ufff7\102\ufff7\103\ufff7\001\002\000\060\013\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\022\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\055\uff99\056\uff99\060\uff99\063" +
    "\uff99\065\uff99\001\002\000\046\013\u010b\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\050\uff8e\051\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\001\002\000\016\011\uff89\013\uff89\022" +
    "\uff89\052\uff89\056\uff89\062\uff89\001\002\000\004\011\336" +
    "\001\002\000\004\021\323\001\002\000\106\002\uffe7\003" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\014\uffe7\016\uffe7\021\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\047\uffe7\061\uffe7\066\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\102\uffe7\103\uffe7" +
    "\001\002\000\106\002\uffea\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\016\uffea" +
    "\021\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\047\uffea\061\uffea" +
    "\066\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\077" +
    "\uffea\101\uffea\102\uffea\103\uffea\001\002\000\054\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\154\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97" +
    "\051\uff97\052\273\053\uff97\055\uff97\056\uff97\062\274\064" +
    "\272\001\002\000\060\013\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\022\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\055\uff9b\056\uff9b\060\uff9b\063\uff9b\065\uff9b\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\107\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\106\002\ufff1\003\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\016" +
    "\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\047\ufff1\061" +
    "\ufff1\066\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\077\ufff1\101\ufff1\102\ufff1\103\ufff1\001\002\000\004\011" +
    "\261\001\002\000\110\002\uffe5\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\260\014" +
    "\uffe5\016\uffe5\021\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\047" +
    "\uffe5\061\uffe5\066\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\101\uffe5\102\uffe5\103\uffe5\001\002\000" +
    "\060\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a" +
    "\056\uff9a\060\uff9a\063\uff9a\065\uff9a\001\002\000\106\002" +
    "\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\016\uffef\021\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\047\uffef\061\uffef\066\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\076\uffef\077\uffef\101\uffef\102\uffef" +
    "\103\uffef\001\002\000\032\004\046\005\013\006\041\007" +
    "\031\010\067\011\107\016\050\021\005\047\027\075\076" +
    "\076\075\077\053\001\002\000\106\002\ufff2\003\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\014\ufff2\016\ufff2\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\047\ufff2\061\ufff2\066\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\076\ufff2\077\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002" +
    "\000\004\013\256\001\002\000\004\021\253\001\002\000" +
    "\106\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\014\uffeb\016\uffeb\021\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\047\uffeb\061\uffeb\066\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\101\uffeb" +
    "\102\uffeb\103\uffeb\001\002\000\016\011\uff88\013\uff88\022" +
    "\uff88\052\uff88\056\uff88\062\uff88\001\002\000\106\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\021\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\047\ufffb\061\ufffb\066\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\103" +
    "\ufffb\001\002\000\106\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\016" +
    "\ufffc\021\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\047\ufffc\061" +
    "\ufffc\066\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\077\ufffc\101\ufffc\102\ufffc\103\ufffc\001\002\000\106\002" +
    "\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\014\ufff0\016\ufff0\021\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\047\ufff0\061\ufff0\066\ufff0\072\ufff0\073" +
    "\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\101\ufff0\102\ufff0" +
    "\103\ufff0\001\002\000\106\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\016\ufff9\021\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\047\ufff9" +
    "\061\ufff9\066\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076" +
    "\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9\001\002\000\004" +
    "\021\245\001\002\000\004\055\233\001\002\000\106\002" +
    "\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\014\ufffd\016\ufffd\021\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\047\ufffd\061\ufffd\066\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd" +
    "\103\ufffd\001\002\000\106\002\ufffa\003\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa" +
    "\016\ufffa\021\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\047\ufffa" +
    "\061\ufffa\066\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\001\002\000\046" +
    "\013\232\015\uff93\016\uff93\017\uff93\020\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\050\uff93\051\uff93\053\uff93\055\uff93\056\uff93\001\002\000" +
    "\060\013\uff98\015\uff98\016\uff98\017\uff98\020\uff98\022\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\050\uff98\051\uff98\052\uff98\053\uff98\055\uff98" +
    "\056\uff98\060\uff98\063\uff98\065\uff98\001\002\000\016\011" +
    "\uff8b\013\uff8b\022\uff8b\052\uff8b\056\uff8b\062\uff8b\001\002" +
    "\000\004\002\231\001\002\000\006\011\uff87\060\213\001" +
    "\002\000\044\015\123\016\114\017\122\020\126\037\130" +
    "\040\115\041\116\042\125\043\117\044\131\045\112\046" +
    "\113\050\207\051\210\053\127\055\120\056\121\001\002" +
    "\000\106\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\016\ufff6\021\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\047\ufff6\061\ufff6\066\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\101" +
    "\ufff6\102\ufff6\103\ufff6\001\002\000\004\021\204\001\002" +
    "\000\004\021\201\001\002\000\004\060\100\001\002\000" +
    "\102\003\045\004\046\005\013\006\041\007\031\010\067" +
    "\011\040\012\034\014\011\016\050\021\005\024\020\025" +
    "\015\026\033\027\007\030\070\031\035\033\025\034\062" +
    "\035\023\036\077\047\027\066\063\072\072\073\042\074" +
    "\055\075\076\076\075\077\053\101\044\102\052\103\017" +
    "\001\002\000\104\003\045\004\046\005\013\006\041\007" +
    "\031\010\067\011\040\012\034\014\011\016\050\021\005" +
    "\024\020\025\015\026\033\027\007\030\070\031\035\033" +
    "\025\034\062\035\023\036\077\047\027\061\102\066\063" +
    "\072\072\073\042\074\055\075\076\076\075\077\053\101" +
    "\044\102\052\103\017\001\002\000\004\034\104\001\002" +
    "\000\106\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\014\uffff\016\uffff\021\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\047\uffff\061\uffff\066\uffff" +
    "\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101" +
    "\uffff\102\uffff\103\uffff\001\002\000\004\021\105\001\002" +
    "\000\032\004\046\005\013\006\041\007\031\010\067\011" +
    "\107\016\050\021\005\047\027\075\076\076\075\077\053" +
    "\001\002\000\060\013\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\022\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\055\uff93\056\uff93\060\uff93\063\uff93\065\uff93\001\002" +
    "\000\066\013\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\154\022\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\055\uff97\056\uff97\060\uff97\062\153\063\uff97\064\152" +
    "\065\uff97\001\002\000\060\013\uff8e\015\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\022\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\055\uff8e\056\uff8e\060\uff8e\063\uff8e\065\uff8e" +
    "\001\002\000\042\015\123\016\114\017\122\020\126\022" +
    "\124\037\130\040\115\041\116\042\125\043\117\044\131" +
    "\045\112\046\113\053\127\055\120\056\121\001\002\000" +
    "\032\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\047\027\075\076\076\075\077\053\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\107\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\032\004\046\005\013\006\041\007\031" +
    "\010\067\011\107\016\050\021\005\047\027\075\076\076" +
    "\075\077\053\001\002\000\032\004\046\005\013\006\041" +
    "\007\031\010\067\011\107\016\050\021\005\047\027\075" +
    "\076\076\075\077\053\001\002\000\032\004\046\005\013" +
    "\006\041\007\031\010\067\011\107\016\050\021\005\047" +
    "\027\075\076\076\075\077\053\001\002\000\032\004\046" +
    "\005\013\006\041\007\031\010\067\011\107\016\050\021" +
    "\005\047\027\075\076\076\075\077\053\001\002\000\032" +
    "\004\046\005\013\006\041\007\031\010\067\011\107\016" +
    "\050\021\005\047\027\075\076\076\075\077\053\001\002" +
    "\000\032\004\046\005\013\006\041\007\031\010\067\011" +
    "\107\016\050\021\005\047\027\075\076\076\075\077\053" +
    "\001\002\000\032\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\075\076\076\075" +
    "\077\053\001\002\000\032\004\046\005\013\006\041\007" +
    "\031\010\067\011\107\016\050\021\005\047\027\075\076" +
    "\076\075\077\053\001\002\000\004\013\137\001\002\000" +
    "\032\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\047\027\075\076\076\075\077\053\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\107\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\032\004\046\005\013\006\041\007\031" +
    "\010\067\011\107\016\050\021\005\047\027\075\076\076" +
    "\075\077\053\001\002\000\032\004\046\005\013\006\041" +
    "\007\031\010\067\011\107\016\050\021\005\047\027\075" +
    "\076\076\075\077\053\001\002\000\032\004\046\005\013" +
    "\006\041\007\031\010\067\011\107\016\050\021\005\047" +
    "\027\075\076\076\075\077\053\001\002\000\060\013\uffa1" +
    "\015\123\016\114\017\122\020\126\022\uffa1\037\130\040" +
    "\115\041\116\042\125\043\117\044\uffa1\045\112\046\113" +
    "\050\uffa1\051\uffa1\052\uffa1\053\127\055\120\056\121\060" +
    "\uffa1\063\uffa1\065\uffa1\001\002\000\060\013\uffa8\015\123" +
    "\016\114\017\122\020\126\022\uffa8\037\uffa8\040\115\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\127\055\uffa8\056\uffa8\060\uffa8\063" +
    "\uffa8\065\uffa8\001\002\000\060\013\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\022\uffa9\037\uffa9\040\115\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\055\uffa9\056\uffa9\060\uffa9\063\uffa9\065" +
    "\uffa9\001\002\000\060\013\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\022\uffab\037\uffab\040\115\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\055\uffab\056\uffab\060\uffab\063\uffab\065\uffab\001" +
    "\002\000\060\013\uffa5\015\123\016\114\017\122\020\126" +
    "\022\uffa5\037\uffa5\040\115\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\127" +
    "\055\uffa5\056\uffa5\060\uffa5\063\uffa5\065\uffa5\001\002\000" +
    "\106\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\021\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\047\uffc8\061\uffc8\066\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\101\uffc8" +
    "\102\uffc8\103\uffc8\001\002\000\060\013\uffae\015\uffae\016" +
    "\uffae\017\122\020\126\022\uffae\037\uffae\040\115\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\127\055\uffae\056\uffae\060\uffae\063\uffae" +
    "\065\uffae\001\002\000\060\013\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\022\uffac\037\uffac\040\115\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\055\uffac\056\uffac\060\uffac\063\uffac\065\uffac" +
    "\001\002\000\060\013\uffa4\015\123\016\114\017\122\020" +
    "\126\022\uffa4\037\uffa4\040\115\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\127\055\uffa4\056\uffa4\060\uffa4\063\uffa4\065\uffa4\001\002" +
    "\000\060\013\uffa6\015\123\016\114\017\122\020\126\022" +
    "\uffa6\037\uffa6\040\115\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\127\055" +
    "\uffa6\056\uffa6\060\uffa6\063\uffa6\065\uffa6\001\002\000\060" +
    "\013\uffa3\015\123\016\114\017\122\020\126\022\uffa3\037" +
    "\uffa3\040\115\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\127\055\uffa3\056" +
    "\uffa3\060\uffa3\063\uffa3\065\uffa3\001\002\000\060\013\uffa7" +
    "\015\123\016\114\017\122\020\126\022\uffa7\037\uffa7\040" +
    "\115\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\127\055\uffa7\056\uffa7\060" +
    "\uffa7\063\uffa7\065\uffa7\001\002\000\056\013\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\022\uffaa\037\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\055\uffaa\056\uffaa\060\uffaa\063\uffaa\065" +
    "\uffaa\001\002\000\060\013\uffad\015\uffad\016\uffad\017\122" +
    "\020\126\022\uffad\037\uffad\040\115\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\127\055\uffad\056\uffad\060\uffad\063\uffad\065\uffad\001" +
    "\002\000\060\013\uff9f\015\123\016\114\017\122\020\126" +
    "\022\uff9f\037\130\040\115\041\116\042\125\043\117\044" +
    "\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f\053\127" +
    "\055\120\056\121\060\uff9f\063\uff9f\065\uff9f\001\002\000" +
    "\060\013\uffa0\015\123\016\114\017\122\020\126\022\uffa0" +
    "\037\130\040\115\041\116\042\125\043\117\044\uffa0\045" +
    "\uffa0\046\113\050\uffa0\051\uffa0\052\uffa0\053\127\055\120" +
    "\056\121\060\uffa0\063\uffa0\065\uffa0\001\002\000\010\011" +
    "\170\071\172\100\171\001\002\000\032\004\046\005\013" +
    "\006\041\007\031\010\067\011\107\016\050\021\005\047" +
    "\027\075\076\076\075\077\053\001\002\000\034\004\046" +
    "\005\013\006\041\007\031\010\067\011\107\016\050\021" +
    "\005\022\155\047\027\075\076\076\075\077\053\001\002" +
    "\000\060\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055" +
    "\uffd5\056\uffd5\060\uffd5\063\uffd5\065\uffd5\001\002\000\006" +
    "\022\161\065\160\001\002\000\044\015\123\016\114\017" +
    "\122\020\126\022\uffd3\037\130\040\115\041\116\042\125" +
    "\043\117\044\131\045\112\046\113\053\127\055\120\056" +
    "\121\065\uffd3\001\002\000\032\004\046\005\013\006\041" +
    "\007\031\010\067\011\107\016\050\021\005\047\027\075" +
    "\076\076\075\077\053\001\002\000\060\013\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\022\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\060\uffd6\063" +
    "\uffd6\065\uffd6\001\002\000\044\015\123\016\114\017\122" +
    "\020\126\022\uffd4\037\130\040\115\041\116\042\125\043" +
    "\117\044\131\045\112\046\113\053\127\055\120\056\121" +
    "\065\uffd4\001\002\000\042\015\123\016\114\017\122\020" +
    "\126\037\130\040\115\041\116\042\125\043\117\044\131" +
    "\045\112\046\113\053\127\055\120\056\121\063\164\001" +
    "\002\000\062\013\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\022\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\055\uff96\056\uff96\060\uff96\062\165\063\uff96\065\uff96\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\107\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\042\015\123\016\114\017\122\020\126" +
    "\037\130\040\115\041\116\042\125\043\117\044\131\045" +
    "\112\046\113\053\127\055\120\056\121\063\167\001\002" +
    "\000\060\013\uff95\015\uff95\016\uff95\017\uff95\020\uff95\022" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053\uff95\055" +
    "\uff95\056\uff95\060\uff95\063\uff95\065\uff95\001\002\000\060" +
    "\013\uff94\015\uff94\016\uff94\017\uff94\020\uff94\022\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\050\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056" +
    "\uff94\060\uff94\063\uff94\065\uff94\001\002\000\004\021\176" +
    "\001\002\000\004\021\173\001\002\000\032\004\046\005" +
    "\013\006\041\007\031\010\067\011\107\016\050\021\005" +
    "\047\027\075\076\076\075\077\053\001\002\000\042\015" +
    "\123\016\114\017\122\020\126\022\175\037\130\040\115" +
    "\041\116\042\125\043\117\044\131\045\112\046\113\053" +
    "\127\055\120\056\121\001\002\000\060\013\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\022\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\060\uffd7\063" +
    "\uffd7\065\uffd7\001\002\000\032\004\046\005\013\006\041" +
    "\007\031\010\067\011\107\016\050\021\005\047\027\075" +
    "\076\076\075\077\053\001\002\000\042\015\123\016\114" +
    "\017\122\020\126\022\200\037\130\040\115\041\116\042" +
    "\125\043\117\044\131\045\112\046\113\053\127\055\120" +
    "\056\121\001\002\000\060\013\uff8f\015\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\022\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\055\uff8f\056\uff8f\060\uff8f\063\uff8f\065\uff8f" +
    "\001\002\000\032\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\075\076\076\075" +
    "\077\053\001\002\000\042\015\123\016\114\017\122\020" +
    "\126\022\203\037\130\040\115\041\116\042\125\043\117" +
    "\044\131\045\112\046\113\053\127\055\120\056\121\001" +
    "\002\000\060\013\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\022\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\055\uff92\056\uff92\060\uff92\063\uff92\065\uff92\001\002\000" +
    "\032\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\047\027\075\076\076\075\077\053\001" +
    "\002\000\042\015\123\016\114\017\122\020\126\022\206" +
    "\037\130\040\115\041\116\042\125\043\117\044\131\045" +
    "\112\046\113\053\127\055\120\056\121\001\002\000\060" +
    "\013\uff91\015\uff91\016\uff91\017\uff91\020\uff91\022\uff91\037" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\050\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056" +
    "\uff91\060\uff91\063\uff91\065\uff91\001\002\000\004\013\212" +
    "\001\002\000\004\013\211\001\002\000\106\002\uffdf\003" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\014\uffdf\016\uffdf\021\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\047\uffdf\061\uffdf\066\uffdf\072\uffdf\073\uffdf\074" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf" +
    "\001\002\000\106\002\uffe0\003\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\016\uffe0" +
    "\021\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\047\uffe0\061\uffe0" +
    "\066\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077" +
    "\uffe0\101\uffe0\102\uffe0\103\uffe0\001\002\000\004\011\214" +
    "\001\002\000\004\057\226\001\002\000\006\011\216\061" +
    "\217\001\002\000\004\057\222\001\002\000\004\011\220" +
    "\001\002\000\004\013\221\001\002\000\106\002\uffb6\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\014\uffb6\016\uffb6\021\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\047\uffb6\061\uffb6\066\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\001\002\000\020\024\020\025\015\026\033\027\007\030" +
    "\070\072\224\074\055\001\002\000\004\013\225\001\002" +
    "\000\016\011\uff87\013\uff87\022\uff87\052\uff87\056\uff87\062" +
    "\uff87\001\002\000\006\011\uffb5\061\uffb5\001\002\000\020" +
    "\024\020\025\015\026\033\027\007\030\070\072\224\074" +
    "\055\001\002\000\004\013\230\001\002\000\006\011\uffb4" +
    "\061\uffb4\001\002\000\004\002\001\001\002\000\106\002" +
    "\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\016\uffe9\021\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\047\uffe9\061\uffe9\066\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\101\uffe9\102\uffe9" +
    "\103\uffe9\001\002\000\020\024\020\025\015\026\033\027" +
    "\007\030\070\072\224\074\055\001\002\000\004\056\235" +
    "\001\002\000\004\011\236\001\002\000\004\052\237\001" +
    "\002\000\004\067\240\001\002\000\004\066\241\001\002" +
    "\000\004\021\242\001\002\000\004\022\243\001\002\000" +
    "\004\013\244\001\002\000\106\002\uffc0\003\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\014" +
    "\uffc0\016\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\047" +
    "\uffc0\061\uffc0\066\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\101\uffc0\102\uffc0\103\uffc0\001\002\000" +
    "\032\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\047\027\075\076\076\075\077\053\001" +
    "\002\000\042\015\123\016\114\017\122\020\126\022\247" +
    "\037\130\040\115\041\116\042\125\043\117\044\131\045" +
    "\112\046\113\053\127\055\120\056\121\001\002\000\004" +
    "\060\250\001\002\000\102\003\045\004\046\005\013\006" +
    "\041\007\031\010\067\011\040\012\034\014\011\016\050" +
    "\021\005\024\020\025\015\026\033\027\007\030\070\031" +
    "\035\033\025\034\062\035\023\036\077\047\027\066\063" +
    "\072\072\073\042\074\055\075\076\076\075\077\053\101" +
    "\044\102\052\103\017\001\002\000\104\003\045\004\046" +
    "\005\013\006\041\007\031\010\067\011\040\012\034\014" +
    "\011\016\050\021\005\024\020\025\015\026\033\027\007" +
    "\030\070\031\035\033\025\034\062\035\023\036\077\047" +
    "\027\061\252\066\063\072\072\073\042\074\055\075\076" +
    "\076\075\077\053\101\044\102\052\103\017\001\002\000" +
    "\106\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9\021\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\047\uffc9\061\uffc9\066\uffc9\072" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\001\002\000\032\004\046\005\013\006" +
    "\041\007\031\010\067\011\107\016\050\021\005\047\027" +
    "\075\076\076\075\077\053\001\002\000\042\015\123\016" +
    "\114\017\122\020\126\022\255\037\130\040\115\041\116" +
    "\042\125\043\117\044\131\045\112\046\113\053\127\055" +
    "\120\056\121\001\002\000\060\013\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\022\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050\uff90\051\uff90" +
    "\052\uff90\053\uff90\055\uff90\056\uff90\060\uff90\063\uff90\065" +
    "\uff90\001\002\000\106\002\uffcb\003\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\016" +
    "\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\047\uffcb\061" +
    "\uffcb\066\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\101\uffcb\102\uffcb\103\uffcb\001\002\000\060\013" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\022\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf" +
    "\060\uffaf\063\uffaf\065\uffaf\001\002\000\106\002\uffe6\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\016\uffe6\021\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\047\uffe6\061\uffe6\066\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\101\uffe6\102\uffe6\103\uffe6" +
    "\001\002\000\004\021\262\001\002\000\034\004\046\005" +
    "\013\006\041\007\031\010\067\011\107\016\050\021\005" +
    "\022\263\047\027\075\076\076\075\077\053\001\002\000" +
    "\004\013\267\001\002\000\006\022\265\065\160\001\002" +
    "\000\004\013\266\001\002\000\106\002\uffd9\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\014\uffd9\016\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\047\uffd9\061\uffd9\066\uffd9\072\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\101\uffd9\102\uffd9\103\uffd9\001\002" +
    "\000\106\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\016\uffd8\021\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\047\uffd8\061\uffd8\066\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\101" +
    "\uffd8\102\uffd8\103\uffd8\001\002\000\042\013\271\015\123" +
    "\016\114\017\122\020\126\037\130\040\115\041\116\042" +
    "\125\043\117\044\131\045\112\046\113\053\127\055\120" +
    "\056\121\001\002\000\106\002\uffdc\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc" +
    "\016\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\047\uffdc" +
    "\061\uffdc\066\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc\001\002\000\012" +
    "\011\312\070\313\071\172\100\171\001\002\000\032\004" +
    "\046\005\013\006\041\007\031\010\067\011\107\016\050" +
    "\021\005\047\027\075\076\076\075\077\053\001\002\000" +
    "\032\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\047\027\075\076\076\075\077\053\001" +
    "\002\000\042\015\123\016\114\017\122\020\126\037\130" +
    "\040\115\041\116\042\125\043\117\044\131\045\112\046" +
    "\113\053\127\055\120\056\121\063\276\001\002\000\050" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96" +
    "\051\uff96\052\277\053\uff96\055\uff96\056\uff96\062\300\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\107\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\032\004\046\005\013\006\041\007\031" +
    "\010\067\011\107\016\050\021\005\047\027\075\076\076" +
    "\075\077\053\001\002\000\042\015\123\016\114\017\122" +
    "\020\126\037\130\040\115\041\116\042\125\043\117\044" +
    "\131\045\112\046\113\053\127\055\120\056\121\063\302" +
    "\001\002\000\046\015\uff95\016\uff95\017\uff95\020\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\050\uff95\051\uff95\052\303\053\uff95\055\uff95\056" +
    "\uff95\001\002\000\032\004\046\005\013\006\041\007\031" +
    "\010\067\011\107\016\050\021\005\047\027\075\076\076" +
    "\075\077\053\001\002\000\042\013\305\015\123\016\114" +
    "\017\122\020\126\037\130\040\115\041\116\042\125\043" +
    "\117\044\131\045\112\046\113\053\127\055\120\056\121" +
    "\001\002\000\106\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7\016\uffb7" +
    "\021\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\047\uffb7\061\uffb7" +
    "\066\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\101\uffb7\102\uffb7\103\uffb7\001\002\000\042\013\307" +
    "\015\123\016\114\017\122\020\126\037\130\040\115\041" +
    "\116\042\125\043\117\044\131\045\112\046\113\053\127" +
    "\055\120\056\121\001\002\000\106\002\uffb8\003\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\014\uffb8\016\uffb8\021\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\047\uffb8\061\uffb8\066\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\101\uffb8\102\uffb8\103\uffb8\001\002" +
    "\000\042\013\311\015\123\016\114\017\122\020\126\037" +
    "\130\040\115\041\116\042\125\043\117\044\131\045\112" +
    "\046\113\053\127\055\120\056\121\001\002\000\106\002" +
    "\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\014\uffe1\016\uffe1\021\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\047\uffe1\061\uffe1\066\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\101\uffe1\102\uffe1" +
    "\103\uffe1\001\002\000\046\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\050\uff94\051\uff94\052\320\053\uff94\055" +
    "\uff94\056\uff94\001\002\000\004\021\314\001\002\000\032" +
    "\004\046\005\013\006\041\007\031\010\067\011\107\016" +
    "\050\021\005\047\027\075\076\076\075\077\053\001\002" +
    "\000\042\015\123\016\114\017\122\020\126\022\316\037" +
    "\130\040\115\041\116\042\125\043\117\044\131\045\112" +
    "\046\113\053\127\055\120\056\121\001\002\000\004\013" +
    "\317\001\002\000\106\002\uffbf\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\016" +
    "\uffbf\021\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\047\uffbf\061" +
    "\uffbf\066\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\101\uffbf\102\uffbf\103\uffbf\001\002\000\032\004" +
    "\046\005\013\006\041\007\031\010\067\011\107\016\050" +
    "\021\005\047\027\075\076\076\075\077\053\001\002\000" +
    "\042\013\322\015\123\016\114\017\122\020\126\037\130" +
    "\040\115\041\116\042\125\043\117\044\131\045\112\046" +
    "\113\053\127\055\120\056\121\001\002\000\106\002\uffb0" +
    "\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\014\uffb0\016\uffb0\021\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\047\uffb0\061\uffb0\066\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\101\uffb0\102\uffb0\103" +
    "\uffb0\001\002\000\032\004\046\005\013\006\041\007\031" +
    "\010\067\011\107\016\050\021\005\047\027\075\076\076" +
    "\075\077\053\001\002\000\042\015\123\016\114\017\122" +
    "\020\126\022\325\037\130\040\115\041\116\042\125\043" +
    "\117\044\131\045\112\046\113\053\127\055\120\056\121" +
    "\001\002\000\004\060\326\001\002\000\102\003\045\004" +
    "\046\005\013\006\041\007\031\010\067\011\040\012\034" +
    "\014\011\016\050\021\005\024\020\025\015\026\033\027" +
    "\007\030\070\031\035\033\025\034\062\035\023\036\077" +
    "\047\027\066\063\072\072\073\042\074\055\075\076\076" +
    "\075\077\053\101\044\102\052\103\017\001\002\000\104" +
    "\003\045\004\046\005\013\006\041\007\031\010\067\011" +
    "\040\012\034\014\011\016\050\021\005\024\020\025\015" +
    "\026\033\027\007\030\070\031\035\033\025\034\062\035" +
    "\023\036\077\047\027\061\330\066\063\072\072\073\042" +
    "\074\055\075\076\076\075\077\053\101\044\102\052\103" +
    "\017\001\002\000\110\002\uffd2\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\016" +
    "\uffd2\021\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\331\033\uffd2\034\uffd2\035\uffd2\036\uffd2\047" +
    "\uffd2\061\uffd2\066\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2\001\002\000" +
    "\006\031\035\060\333\001\002\000\106\002\uffd0\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\014\uffd0\016\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\047\uffd0\061\uffd0\066\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0\001" +
    "\002\000\102\003\045\004\046\005\013\006\041\007\031" +
    "\010\067\011\040\012\034\014\011\016\050\021\005\024" +
    "\020\025\015\026\033\027\007\030\070\031\035\033\025" +
    "\034\062\035\023\036\077\047\027\066\063\072\072\073" +
    "\042\074\055\075\076\076\075\077\053\101\044\102\052" +
    "\103\017\001\002\000\104\003\045\004\046\005\013\006" +
    "\041\007\031\010\067\011\040\012\034\014\011\016\050" +
    "\021\005\024\020\025\015\026\033\027\007\030\070\031" +
    "\035\033\025\034\062\035\023\036\077\047\027\061\335" +
    "\066\063\072\072\073\042\074\055\075\076\076\075\077" +
    "\053\101\044\102\052\103\017\001\002\000\106\002\uffd1" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\014\uffd1\016\uffd1\021\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\047\uffd1\061\uffd1\066\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\001\002\000\004\057\337\001\002\000\022\011\340" +
    "\024\020\025\015\026\033\027\007\030\070\072\224\074" +
    "\055\001\002\000\004\052\376\001\002\000\010\013\342" +
    "\052\343\062\344\001\002\000\106\002\uffe2\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\014\uffe2\016\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\047\uffe2\061\uffe2\066\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\101\uffe2\102\uffe2\103\uffe2\001\002" +
    "\000\032\004\046\005\013\006\041\007\031\010\067\011" +
    "\107\016\050\021\005\047\027\075\076\076\075\077\053" +
    "\001\002\000\004\063\345\001\002\000\006\052\346\062" +
    "\347\001\002\000\004\062\370\001\002\000\004\063\350" +
    "\001\002\000\004\052\351\001\002\000\004\062\352\001" +
    "\002\000\004\062\354\001\002\000\006\063\363\065\362" +
    "\001\002\000\032\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\075\076\076\075" +
    "\077\053\001\002\000\044\015\123\016\114\017\122\020" +
    "\126\037\130\040\115\041\116\042\125\043\117\044\131" +
    "\045\112\046\113\053\127\055\120\056\121\063\uffbb\065" +
    "\uffbb\001\002\000\006\063\360\065\357\001\002\000\032" +
    "\004\046\005\013\006\041\007\031\010\067\011\107\016" +
    "\050\021\005\047\027\075\076\076\075\077\053\001\002" +
    "\000\006\063\uffb9\065\uffb9\001\002\000\044\015\123\016" +
    "\114\017\122\020\126\037\130\040\115\041\116\042\125" +
    "\043\117\044\131\045\112\046\113\053\127\055\120\056" +
    "\121\063\uffbc\065\uffbc\001\002\000\004\062\365\001\002" +
    "\000\004\013\364\001\002\000\106\002\uffbd\003\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\014\uffbd\016\uffbd\021\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\047\uffbd\061\uffbd\066\uffbd\072\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\101\uffbd\102\uffbd\103\uffbd\001\002" +
    "\000\032\004\046\005\013\006\041\007\031\010\067\011" +
    "\107\016\050\021\005\047\027\075\076\076\075\077\053" +
    "\001\002\000\006\063\367\065\357\001\002\000\006\063" +
    "\uffba\065\uffba\001\002\000\032\004\046\005\013\006\041" +
    "\007\031\010\067\011\107\016\050\021\005\047\027\075" +
    "\076\076\075\077\053\001\002\000\006\063\372\065\357" +
    "\001\002\000\004\013\373\001\002\000\106\002\uffbe\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\016\uffbe\021\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\047\uffbe\061\uffbe\066\uffbe\072\uffbe\073\uffbe\074" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\001\002\000\042\013\375\015\123\016\114\017\122\020" +
    "\126\037\130\040\115\041\116\042\125\043\117\044\131" +
    "\045\112\046\113\053\127\055\120\056\121\001\002\000" +
    "\106\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\014\uffe3\016\uffe3\021\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\047\uffe3\061\uffe3\066\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\001\002\000\004\060\377\001\002\000" +
    "\004\011\u0100\001\002\000\004\057\u0108\001\002\000\006" +
    "\011\u0102\061\u0103\001\002\000\004\057\u0105\001\002\000" +
    "\004\013\u0104\001\002\000\106\002\uffb3\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014" +
    "\uffb3\016\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\047" +
    "\uffb3\061\uffb3\066\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\001\002\000" +
    "\032\004\046\005\013\006\041\007\031\010\067\011\107" +
    "\016\050\021\005\047\027\075\076\076\075\077\053\001" +
    "\002\000\042\013\u0107\015\123\016\114\017\122\020\126" +
    "\037\130\040\115\041\116\042\125\043\117\044\131\045" +
    "\112\046\113\053\127\055\120\056\121\001\002\000\006" +
    "\011\uffb2\061\uffb2\001\002\000\032\004\046\005\013\006" +
    "\041\007\031\010\067\011\107\016\050\021\005\047\027" +
    "\075\076\076\075\077\053\001\002\000\042\013\u010a\015" +
    "\123\016\114\017\122\020\126\037\130\040\115\041\116" +
    "\042\125\043\117\044\131\045\112\046\113\053\127\055" +
    "\120\056\121\001\002\000\006\011\uffb1\061\uffb1\001\002" +
    "\000\106\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\016\uffe8\021\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\047\uffe8\061\uffe8\066\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\101" +
    "\uffe8\102\uffe8\103\uffe8\001\002\000\060\013\uffa2\015\123" +
    "\016\114\017\122\020\126\022\uffa2\037\130\040\115\041" +
    "\116\042\125\043\117\044\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\127\055\120\056\121\060\uffa2\063" +
    "\uffa2\065\uffa2\001\002\000\042\015\123\016\114\017\122" +
    "\020\126\037\130\040\115\041\116\042\125\043\117\044" +
    "\131\045\112\046\113\053\127\055\120\056\121\060\u010e" +
    "\001\002\000\034\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\054\u0111\075\076" +
    "\076\075\077\053\001\002\000\036\004\046\005\013\006" +
    "\041\007\031\010\067\011\107\016\050\021\005\047\027" +
    "\054\u0120\061\u011f\075\076\076\075\077\053\001\002\000" +
    "\036\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\016\uffc3\021\uffc3\047\uffc3\054\uffc3\061\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\001\002\000\006\052\u0118\061\u0119\001\002" +
    "\000\042\015\123\016\114\017\122\020\126\037\130\040" +
    "\115\041\116\042\125\043\117\044\131\045\112\046\113" +
    "\052\u0113\053\127\055\120\056\121\001\002\000\004\056" +
    "\u0114\001\002\000\004\060\u0115\001\002\000\102\003\045" +
    "\004\046\005\013\006\041\007\031\010\067\011\040\012" +
    "\034\014\011\016\050\021\005\024\020\025\015\026\033" +
    "\027\007\030\070\031\035\033\025\034\062\035\023\036" +
    "\077\047\027\066\063\072\072\073\042\074\055\075\076" +
    "\076\075\077\053\101\044\102\052\103\017\001\002\000" +
    "\104\003\045\004\046\005\013\006\041\007\031\010\067" +
    "\011\040\012\034\014\011\016\050\021\005\024\020\025" +
    "\015\026\033\027\007\030\070\031\035\033\025\034\062" +
    "\035\023\036\077\047\027\061\u0117\066\063\072\072\073" +
    "\042\074\055\075\076\076\075\077\053\101\044\102\052" +
    "\103\017\001\002\000\036\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\016\uffc2\021\uffc2\047\uffc2\054\uffc2" +
    "\061\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000\004\056" +
    "\u011a\001\002\000\106\002\uffc5\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\016" +
    "\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\047\uffc5\061" +
    "\uffc5\066\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\101\uffc5\102\uffc5\103\uffc5\001\002\000\004\060" +
    "\u011b\001\002\000\102\003\045\004\046\005\013\006\041" +
    "\007\031\010\067\011\040\012\034\014\011\016\050\021" +
    "\005\024\020\025\015\026\033\027\007\030\070\031\035" +
    "\033\025\034\062\035\023\036\077\047\027\066\063\072" +
    "\072\073\042\074\055\075\076\076\075\077\053\101\044" +
    "\102\052\103\017\001\002\000\104\003\045\004\046\005" +
    "\013\006\041\007\031\010\067\011\040\012\034\014\011" +
    "\016\050\021\005\024\020\025\015\026\033\027\007\030" +
    "\070\031\035\033\025\034\062\035\023\036\077\047\027" +
    "\061\u011d\066\063\072\072\073\042\074\055\075\076\076" +
    "\075\077\053\101\044\102\052\103\017\001\002\000\036" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\016" +
    "\uffc1\021\uffc1\047\uffc1\054\uffc1\061\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\001\002\000\036\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\016\uffc4\021\uffc4\047\uffc4\054\uffc4" +
    "\061\uffc4\075\uffc4\076\uffc4\077\uffc4\001\002\000\106\002" +
    "\uffc6\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\014\uffc6\016\uffc6\021\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\047\uffc6\061\uffc6\066\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\001\002\000\006\052\u0118\061\u0121\001\002\000" +
    "\106\002\uffc7\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\014\uffc7\016\uffc7\021\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\047\uffc7\061\uffc7\066\uffc7\072" +
    "\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\101\uffc7" +
    "\102\uffc7\103\uffc7\001\002\000\032\004\046\005\013\006" +
    "\041\007\031\010\067\011\u0123\016\050\021\005\047\027" +
    "\075\076\076\075\077\053\001\002\000\054\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\154\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051" +
    "\uff97\052\273\053\uff97\055\uff97\056\uff97\062\153\064\152" +
    "\001\002\000\032\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\075\076\076\075" +
    "\077\053\001\002\000\042\013\u0126\015\123\016\114\017" +
    "\122\020\126\037\130\040\115\041\116\042\125\043\117" +
    "\044\131\045\112\046\113\053\127\055\120\056\121\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\u0128\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\004\022\u012e\001\002\000\054\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\154\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97" +
    "\051\uff97\052\u012c\053\uff97\055\uff97\056\uff97\062\153\064" +
    "\152\001\002\000\044\015\123\016\114\017\122\020\126" +
    "\037\130\040\115\041\116\042\125\043\117\044\131\045" +
    "\112\046\113\050\u012a\051\u012b\053\127\055\120\056\121" +
    "\001\002\000\004\022\uffcd\001\002\000\004\022\uffcc\001" +
    "\002\000\032\004\046\005\013\006\041\007\031\010\067" +
    "\011\107\016\050\021\005\047\027\075\076\076\075\077" +
    "\053\001\002\000\042\015\123\016\114\017\122\020\126" +
    "\022\uffce\037\130\040\115\041\116\042\125\043\117\044" +
    "\131\045\112\046\113\053\127\055\120\056\121\001\002" +
    "\000\004\060\u012f\001\002\000\102\003\045\004\046\005" +
    "\013\006\041\007\031\010\067\011\040\012\034\014\011" +
    "\016\050\021\005\024\020\025\015\026\033\027\007\030" +
    "\070\031\035\033\025\034\062\035\023\036\077\047\027" +
    "\066\063\072\072\073\042\074\055\075\076\076\075\077" +
    "\053\101\044\102\052\103\017\001\002\000\104\003\045" +
    "\004\046\005\013\006\041\007\031\010\067\011\040\012" +
    "\034\014\011\016\050\021\005\024\020\025\015\026\033" +
    "\027\007\030\070\031\035\033\025\034\062\035\023\036" +
    "\077\047\027\061\u0131\066\063\072\072\073\042\074\055" +
    "\075\076\076\075\077\053\101\044\102\052\103\017\001" +
    "\002\000\106\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\016\uffcf\021" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\047\uffcf\061\uffcf\066" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\001\002\000\106\002\uffca\003" +
    "\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\014\uffca\016\uffca\021\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\047\uffca\061\uffca\066\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\101\uffca\102\uffca\103\uffca" +
    "\001\002\000\032\004\046\005\013\006\041\007\031\010" +
    "\067\011\107\016\050\021\005\047\027\075\076\076\075" +
    "\077\053\001\002\000\042\015\123\016\114\017\122\020" +
    "\126\022\u0135\037\130\040\115\041\116\042\125\043\117" +
    "\044\131\045\112\046\113\053\127\055\120\056\121\001" +
    "\002\000\004\013\u0136\001\002\000\106\002\uffe4\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\014\uffe4\016\uffe4\021\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\047\uffe4\061\uffe4\066\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\001" +
    "\002\000\004\021\u0138\001\002\000\022\022\u013a\024\020" +
    "\025\015\026\033\027\007\030\070\072\224\074\055\001" +
    "\002\000\006\022\u0141\065\u0140\001\002\000\004\060\u013d" +
    "\001\002\000\004\011\u013c\001\002\000\006\022\uffda\065" +
    "\uffda\001\002\000\102\003\045\004\046\005\013\006\041" +
    "\007\031\010\067\011\040\012\034\014\011\016\050\021" +
    "\005\024\020\025\015\026\033\027\007\030\070\031\035" +
    "\033\025\034\062\035\023\036\077\047\027\066\063\072" +
    "\072\073\042\074\055\075\076\076\075\077\053\101\044" +
    "\102\052\103\017\001\002\000\104\003\045\004\046\005" +
    "\013\006\041\007\031\010\067\011\040\012\034\014\011" +
    "\016\050\021\005\024\020\025\015\026\033\027\007\030" +
    "\070\031\035\033\025\034\062\035\023\036\077\047\027" +
    "\061\u013f\066\063\072\072\073\042\074\055\075\076\076" +
    "\075\077\053\101\044\102\052\103\017\001\002\000\106" +
    "\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\014\uffdd\016\uffdd\021\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\047\uffdd\061\uffdd\066\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101\uffdd\102" +
    "\uffdd\103\uffdd\001\002\000\020\024\020\025\015\026\033" +
    "\027\007\030\070\072\224\074\055\001\002\000\004\060" +
    "\u0142\001\002\000\102\003\045\004\046\005\013\006\041" +
    "\007\031\010\067\011\040\012\034\014\011\016\050\021" +
    "\005\024\020\025\015\026\033\027\007\030\070\031\035" +
    "\033\025\034\062\035\023\036\077\047\027\066\063\072" +
    "\072\073\042\074\055\075\076\076\075\077\053\101\044" +
    "\102\052\103\017\001\002\000\104\003\045\004\046\005" +
    "\013\006\041\007\031\010\067\011\040\012\034\014\011" +
    "\016\050\021\005\024\020\025\015\026\033\027\007\030" +
    "\070\031\035\033\025\034\062\035\023\036\077\047\027" +
    "\061\u0144\066\063\072\072\073\042\074\055\075\076\076" +
    "\075\077\053\101\044\102\052\103\017\001\002\000\106" +
    "\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\014\uffde\016\uffde\021\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\047\uffde\061\uffde\066\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\101\uffde\102" +
    "\uffde\103\uffde\001\002\000\004\011\u0146\001\002\000\006" +
    "\022\uffdb\065\uffdb\001\002\000\004\022\u014a\001\002\000" +
    "\042\015\123\016\114\017\122\020\126\022\u0149\037\130" +
    "\040\115\041\116\042\125\043\117\044\131\045\112\046" +
    "\113\053\127\055\120\056\121\001\002\000\060\013\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\022\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\056\uff9e\060" +
    "\uff9e\063\uff9e\065\uff9e\001\002\000\032\004\046\005\013" +
    "\006\041\007\031\010\067\011\107\016\050\021\005\047" +
    "\027\075\076\076\075\077\053\001\002\000\060\013\uff9d" +
    "\015\123\016\114\017\122\020\126\022\uff9d\037\130\040" +
    "\115\041\116\042\125\043\117\044\131\045\112\046\113" +
    "\050\uff9d\051\uff9d\052\uff9d\053\127\055\120\056\121\060" +
    "\uff9d\063\uff9d\065\uff9d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\072\002\070\003\023\004\020\005\072\006" +
    "\056\007\055\010\063\011\064\012\007\013\060\015\027" +
    "\016\073\021\005\022\011\023\021\024\013\026\050\030" +
    "\042\031\057\032\046\033\003\034\015\037\025\040\053" +
    "\041\036\044\065\045\031\046\035\001\001\000\002\001" +
    "\001\000\012\005\u0147\021\u0146\044\105\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\004\102\005\072\006\056\007" +
    "\055\010\063\011\064\012\007\013\060\015\027\016\073" +
    "\021\005\022\011\023\021\024\013\026\050\030\042\031" +
    "\057\032\046\033\003\034\015\037\025\040\053\041\036" +
    "\044\065\045\031\046\035\001\001\000\010\005\u010c\044" +
    "\105\045\107\001\001\000\002\001\001\000\010\005\u010b" +
    "\044\105\045\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\267\044\105" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\256\044\105\045\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\003\100" +
    "\004\020\005\072\006\056\007\055\010\063\011\064\012" +
    "\007\013\060\015\027\016\073\021\005\022\011\023\021" +
    "\024\013\026\050\030\042\031\057\032\046\033\003\034" +
    "\015\037\025\040\053\041\036\044\065\045\031\046\035" +
    "\001\001\000\066\004\102\005\072\006\056\007\055\010" +
    "\063\011\064\012\007\013\060\015\027\016\073\021\005" +
    "\022\011\023\021\024\013\026\050\030\042\031\057\032" +
    "\046\033\003\034\015\037\025\040\053\041\036\044\065" +
    "\045\031\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\110\044\105\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\150\044\105\045\107" +
    "\001\001\000\010\005\147\044\105\045\107\001\001\000" +
    "\010\005\146\044\105\045\107\001\001\000\010\005\145" +
    "\044\105\045\107\001\001\000\010\005\144\044\105\045" +
    "\107\001\001\000\010\005\143\044\105\045\107\001\001" +
    "\000\010\005\142\044\105\045\107\001\001\000\010\005" +
    "\141\044\105\045\107\001\001\000\010\005\140\044\105" +
    "\045\107\001\001\000\010\005\137\044\105\045\107\001" +
    "\001\000\002\001\001\000\010\005\135\044\105\045\107" +
    "\001\001\000\010\005\134\044\105\045\107\001\001\000" +
    "\010\005\133\044\105\045\107\001\001\000\010\005\132" +
    "\044\105\045\107\001\001\000\010\005\131\044\105\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\162\044\105\045" +
    "\107\001\001\000\012\005\156\027\155\044\105\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\161\044\105\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\165\044\105\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\173\044\105\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\176\044\105\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\201\044\105\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\204\044\105" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\245\044\105\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\250\004\020\005\072\006\056\007" +
    "\055\010\063\011\064\012\007\013\060\015\027\016\073" +
    "\021\005\022\011\023\021\024\013\026\050\030\042\031" +
    "\057\032\046\033\003\034\015\037\025\040\053\041\036" +
    "\044\065\045\031\046\035\001\001\000\066\004\102\005" +
    "\072\006\056\007\055\010\063\011\064\012\007\013\060" +
    "\015\027\016\073\021\005\022\011\023\021\024\013\026" +
    "\050\030\042\031\057\032\046\033\003\034\015\037\025" +
    "\040\053\041\036\044\065\045\031\046\035\001\001\000" +
    "\002\001\001\000\010\005\253\044\105\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\156\027\263\044\105\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\307\044\105\045\107\001\001" +
    "\000\010\005\274\044\105\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\305\044\105\045\107" +
    "\001\001\000\010\005\300\044\105\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\303\044\105" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\314\044\105\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\320\044\105\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\323\044\105\045\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\326\004\020\005\072\006\056" +
    "\007\055\010\063\011\064\012\007\013\060\015\027\016" +
    "\073\021\005\022\011\023\021\024\013\026\050\030\042" +
    "\031\057\032\046\033\003\034\015\037\025\040\053\041" +
    "\036\044\065\045\031\046\035\001\001\000\066\004\102" +
    "\005\072\006\056\007\055\010\063\011\064\012\007\013" +
    "\060\015\027\016\073\021\005\022\011\023\021\024\013" +
    "\026\050\030\042\031\057\032\046\033\003\034\015\037" +
    "\025\040\053\041\036\044\065\045\031\046\035\001\001" +
    "\000\002\001\001\000\004\011\331\001\001\000\002\001" +
    "\001\000\070\003\333\004\020\005\072\006\056\007\055" +
    "\010\063\011\064\012\007\013\060\015\027\016\073\021" +
    "\005\022\011\023\021\024\013\026\050\030\042\031\057" +
    "\032\046\033\003\034\015\037\025\040\053\041\036\044" +
    "\065\045\031\046\035\001\001\000\066\004\102\005\072" +
    "\006\056\007\055\010\063\011\064\012\007\013\060\015" +
    "\027\016\073\021\005\022\011\023\021\024\013\026\050" +
    "\030\042\031\057\032\046\033\003\034\015\037\025\040" +
    "\053\041\036\044\065\045\031\046\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\373\044\105\045\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\352\001\001\000" +
    "\002\001\001\000\012\005\354\035\355\044\105\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\360\044\105\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\354\035\365\044\105\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\354\035" +
    "\370\044\105\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\u0105\044\105\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\u0108\044\105\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\u0111\017\u010e\020\u010f\044\105\045\107" +
    "\001\001\000\012\005\u0111\020\u011d\044\105\045\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\u0115\004" +
    "\020\005\072\006\056\007\055\010\063\011\064\012\007" +
    "\013\060\015\027\016\073\021\005\022\011\023\021\024" +
    "\013\026\050\030\042\031\057\032\046\033\003\034\015" +
    "\037\025\040\053\041\036\044\065\045\031\046\035\001" +
    "\001\000\066\004\102\005\072\006\056\007\055\010\063" +
    "\011\064\012\007\013\060\015\027\016\073\021\005\022" +
    "\011\023\021\024\013\026\050\030\042\031\057\032\046" +
    "\033\003\034\015\037\025\040\053\041\036\044\065\045" +
    "\031\046\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\u011b\004" +
    "\020\005\072\006\056\007\055\010\063\011\064\012\007" +
    "\013\060\015\027\016\073\021\005\022\011\023\021\024" +
    "\013\026\050\030\042\031\057\032\046\033\003\034\015" +
    "\037\025\040\053\041\036\044\065\045\031\046\035\001" +
    "\001\000\066\004\102\005\072\006\056\007\055\010\063" +
    "\011\064\012\007\013\060\015\027\016\073\021\005\022" +
    "\011\023\021\024\013\026\050\030\042\031\057\032\046" +
    "\033\003\034\015\037\025\040\053\041\036\044\065\045" +
    "\031\046\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\072\007\u0123\044\105\045\107\001\001\000\002" +
    "\001\001\000\010\005\u0124\044\105\045\107\001\001\000" +
    "\002\001\001\000\012\005\u0128\014\u0126\044\105\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\u012c" +
    "\044\105\045\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\u012f\004\020\005\072\006\056\007\055" +
    "\010\063\011\064\012\007\013\060\015\027\016\073\021" +
    "\005\022\011\023\021\024\013\026\050\030\042\031\057" +
    "\032\046\033\003\034\015\037\025\040\053\041\036\044" +
    "\065\045\031\046\035\001\001\000\066\004\102\005\072" +
    "\006\056\007\055\010\063\011\064\012\007\013\060\015" +
    "\027\016\073\021\005\022\011\023\021\024\013\026\050" +
    "\030\042\031\057\032\046\033\003\034\015\037\025\040" +
    "\053\041\036\044\065\045\031\046\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u0133\044\105\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\u013a\025\u0138\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\003\u013d\004\020\005\072\006" +
    "\056\007\055\010\063\011\064\012\007\013\060\015\027" +
    "\016\073\021\005\022\011\023\021\024\013\026\050\030" +
    "\042\031\057\032\046\033\003\034\015\037\025\040\053" +
    "\041\036\044\065\045\031\046\035\001\001\000\066\004" +
    "\102\005\072\006\056\007\055\010\063\011\064\012\007" +
    "\013\060\015\027\016\073\021\005\022\011\023\021\024" +
    "\013\026\050\030\042\031\057\032\046\033\003\034\015" +
    "\037\025\040\053\041\036\044\065\045\031\046\035\001" +
    "\001\000\002\001\001\000\004\021\u0144\001\001\000\002" +
    "\001\001\000\070\003\u0142\004\020\005\072\006\056\007" +
    "\055\010\063\011\064\012\007\013\060\015\027\016\073" +
    "\021\005\022\011\023\021\024\013\026\050\030\042\031" +
    "\057\032\046\033\003\034\015\037\025\040\053\041\036" +
    "\044\065\045\031\046\035\001\001\000\066\004\102\005" +
    "\072\006\056\007\055\010\063\011\064\012\007\013\060" +
    "\015\027\016\073\021\005\022\011\023\021\024\013\026" +
    "\050\030\042\031\057\032\046\033\003\034\015\037\025" +
    "\040\053\041\036\044\065\045\031\046\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\u014a\044\105\045\107\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s) {this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s ){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

   

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT=a;      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= START 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= APPEND_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= ASIGNACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= DECLARACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= INSTANCIA_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ASIGNACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= LLAMADA FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= REMOVE_LISTA FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= RETORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= error FININSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    RESULT = new Print(aleft, aright, a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(c, aleft, aright, b, d, a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(c, aleft, aright, b, a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= ID IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= EXPRESION INCREMENTO FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Incremento(aleft, aright, a);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= EXPRESION DECREMENTO FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Decremento(aleft, aright, a);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(a, aleft, aright, b, p, c);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(a, aleft, aright, b, new LinkedList<HashMap>(),c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETORNO ::= RETURN EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Return(aleft, aright, a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                            var hm2 = new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>();
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id", b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // START ::= STARTWITH ID PAR1 PARAMSCALL PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new StartWith(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // START ::= STARTWITH ID PAR1 PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = new StartWith(aleft, aright, a, new LinkedList<Instruccion>());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REMOVE_LISTA ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Remove(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVE_LISTA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Llamada(aleft, aright, a, b);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAMADA ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Llamada(aleft, aright, a, new LinkedList<Instruccion>());     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);    
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>();
                                                    RESULT.add(a);  
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new If(aleft, aright, a, b);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new IfElse(aleft, aright, a, b, c);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new IfElseIf(aleft, aright, a, b, c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FININSTRUCCION ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new For(aleft, aright, a, b, c, d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ACTUALIZA_FOR ::= EXPRESION INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Incremento(aleft, aright, a);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ACTUALIZA_FOR ::= EXPRESION DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Decremento(aleft, aright, a);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BREAKK ::= BREAK FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTINUEE ::= CONTINUE FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new While(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    RESULT = new DoWhile(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, b, (Caso) c);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, b, null);           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SMATCH ::= MATCH EXPRESION LLAVE1 DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, new LinkedList<Caso>(), (Caso) c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = a; RESULT.add(b);                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = new LinkedList<>(); RESULT.add(a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASO ::= EXPRESION IGUAL MAYORQUE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Caso(a, b, true);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASO ::= DEFAULT IGUAL MAYORQUE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Caso(null, b, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_LIST ::= LIST MENORQUE TIPOS MAYORQUE ID IGUAL NEW LIST PAR1 PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		      RESULT = new DeclaracionList(a, aleft, aright, b);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // APPEND_LIST ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new Append(aleft, aright, a, b);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPEND_LIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_VECTOR ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCH1 CORCH2 IGUAL CORCH1 LISTAVALORES1 CORCH2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new DeclaracionVector(c, aleft, aright, a, b, 1, d);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VECTOR ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCH1 CORCH2 CORCH1 CORCH2 IGUAL CORCH1 LISTAVALORES2 CORCH2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new DeclaracionVector(c, aleft, aright, a, b, d);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTAVALORES1 ::= LISTAVALORES1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
                                                             RESULT.add(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAVALORES1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<Instruccion>(); 
                                                             RESULT.add(a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTAVALORES2 ::= LISTAVALORES2 COMA CORCH1 LISTAVALORES1 CORCH2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTAVALORES2 ::= CORCH1 LISTAVALORES1 CORCH2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new LinkedList<LinkedList<Instruccion>>();     RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION_VECTOR ::= ID CORCH1 EXPRESION CORCH2 IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVector(aleft, aright, a, b, null, c);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION_VECTOR ::= ID CORCH1 EXPRESION CORCH2 CORCH1 EXPRESION CORCH2 IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVector(aleft, aright, a, b, c, d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_STRUCT ::= STRUCT LLAVE1 LISTA_STRUCT LLAVE2 ID FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new DeclaracionStruct(new Tipo(tipoDato.STRUCT), aleft, aright, b, a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_STRUCT ::= LISTA_STRUCT ID DOSPUNTOS TIPOS FININSTRUCCION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;
                                                                            var hm2 = new HashMap<String, Object>();
                                                                            hm2.put("id", b);
                                                                            hm2.put("tipo", c);
                                                                            hm2.put("valor", null);
                                                                            RESULT.add(hm2);
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_STRUCT ::= ID DOSPUNTOS TIPOS FININSTRUCCION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<HashMap>();
                                                                            var hm = new HashMap<String, Object>();
                                                                            hm.put("id", a);
                                                                            hm.put("tipo", b);
                                                                            hm.put("valor", null);
                                                                            RESULT.add(hm);
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTANCIA_STRUCT ::= MUTABILIDAD ID DOSPUNTOS ID IGUAL LLAVE1 VALORES_STRUCT LLAVE2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> d = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new InstanciaStruct(aleft, aright, a, b, c, d);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA_STRUCT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES_STRUCT ::= VALORES_STRUCT ID DOSPUNTOS EXPRESION FININSTRUCCION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;
                                                                                    var hm2 = new HashMap<String, Object>();
                                                                                    hm2.put("id", b);
                                                                                    hm2.put("valor", c);
                                                                                    RESULT.add(hm2);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES_STRUCT ::= ID DOSPUNTOS EXPRESION FININSTRUCCION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<HashMap>();
                                                                                    var hm = new HashMap<String, Object>();
                                                                                    hm.put("id", a);
                                                                                    hm.put("valor", b);
                                                                                    RESULT.add(hm);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNACION_STRUCT ::= ID PUNTO ID IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionStruct(aleft, aright, a, b, c);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, OperadoresAritmeticos.NEGACION, a);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.SUMA);                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.RESTA);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION MULTIPLICAR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MULTIPLICACION);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.DIVISION);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.POTENCIA);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MODULO);                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.IGUALACION);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION DIFERENCIACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.DIFERENCIACION);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORQUE);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION MENORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORIGUALQUE);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORQUE);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION MAYORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORIGUALQUE);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, OperadoresLogicos.NOT, a);                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.OR);                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.AND);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.XOR);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;                                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Casteo(a, aleft, aright, b);                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.ENTERO), aleft, aright, Integer.parseInt(a));           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.DECIMAL), aleft, aright, new Double(a));                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.CADENA), aleft, aright, a);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.CARACTER), aleft, aright, a);                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.BOOLEANO), aleft, aright, Boolean.parseBoolean(a));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(aleft, aright, a);                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= ID CORCH1 EXPRESION CORCH2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVector(aleft, aright, a, b, null);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ID CORCH1 EXPRESION CORCH2 CORCH1 EXPRESION CORCH2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVector(aleft, aright, a, b, c);                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoStruct(aleft, aright, a, b);                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Round(aleft, aright, a);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Length(aleft, aright, a);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= TOSTRING PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ToString(aleft, aright, a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= ID PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Find(aleft, aright, a, b);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= REMOVE_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.VOID);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPOS ::= STRUCT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.STRUCT);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
