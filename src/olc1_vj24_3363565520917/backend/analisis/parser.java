
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1_vj24_3363565520917.backend.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_vj24_3363565520917.backend.abstracto.Instruccion;
import olc1_vj24_3363565520917.backend.simbolo.Tipo;
import olc1_vj24_3363565520917.backend.simbolo.tipoDato;
import olc1_vj24_3363565520917.backend.excepciones.Errores;
import olc1_vj24_3363565520917.backend.instrucciones.Print;
import olc1_vj24_3363565520917.backend.instrucciones.Declaracion;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVar;
import olc1_vj24_3363565520917.backend.instrucciones.If;
import olc1_vj24_3363565520917.backend.instrucciones.IfElse;
import olc1_vj24_3363565520917.backend.instrucciones.IfElseIf;
import olc1_vj24_3363565520917.backend.instrucciones.Caso;
import olc1_vj24_3363565520917.backend.instrucciones.Match;
import olc1_vj24_3363565520917.backend.instrucciones.For;
import olc1_vj24_3363565520917.backend.instrucciones.While;
import olc1_vj24_3363565520917.backend.instrucciones.DoWhile;
import olc1_vj24_3363565520917.backend.instrucciones.Break;
import olc1_vj24_3363565520917.backend.instrucciones.Continue;
import olc1_vj24_3363565520917.backend.instrucciones.Metodo;
import olc1_vj24_3363565520917.backend.instrucciones.Append;
import olc1_vj24_3363565520917.backend.instrucciones.Remove;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionList;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionList;
import olc1_vj24_3363565520917.backend.expresiones.Nativo;
import olc1_vj24_3363565520917.backend.expresiones.Aritmeticas;
import olc1_vj24_3363565520917.backend.expresiones.Relacionales;
import olc1_vj24_3363565520917.backend.expresiones.Logicos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresAritmeticos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresRelacionales;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresLogicos;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVar;
import olc1_vj24_3363565520917.backend.expresiones.Casteo;
import olc1_vj24_3363565520917.backend.expresiones.Incremento;
import olc1_vj24_3363565520917.backend.expresiones.Decremento;
import olc1_vj24_3363565520917.backend.expresiones.AccesoList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\010\007\000" +
    "\002\006\011\000\002\006\007\000\002\007\006\000\002" +
    "\007\005\000\002\007\005\000\002\024\011\000\002\011" +
    "\011\000\002\011\015\000\002\011\013\000\002\013\014" +
    "\000\002\014\005\000\002\014\004\000\002\014\004\000" +
    "\002\022\004\000\002\023\004\000\002\015\011\000\002" +
    "\016\013\000\002\012\010\000\002\012\007\000\002\012" +
    "\007\000\002\017\004\000\002\017\003\000\002\020\010" +
    "\000\002\020\010\000\002\025\015\000\002\026\006\000" +
    "\002\027\011\000\002\030\011\000\002\030\011\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\006\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\066\003\035\004\036\005\012\006\033\007" +
    "\026\010\053\011\032\012\030\014\010\016\037\021\004" +
    "\024\016\025\013\026\027\027\006\030\054\031\031\033" +
    "\023\034\046\035\021\036\060\047\024\066\047\074\041" +
    "\102\040\103\015\001\002\000\040\004\036\005\012\006" +
    "\033\007\026\010\053\011\070\016\037\021\004\024\016" +
    "\025\013\026\027\027\006\030\054\047\024\074\041\001" +
    "\002\000\004\011\303\001\002\000\014\011\uffb2\013\uffb2" +
    "\022\uffb2\052\uffb2\056\uffb2\001\002\000\072\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\016\ufff8\021\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\047\ufff8\061\ufff8\066\ufff8\074\ufff8\102\ufff8\103" +
    "\ufff8\001\002\000\004\021\277\001\002\000\072\002\ufff5" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\016\ufff5\021\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\047\ufff5\061\ufff5\066\ufff5\074\ufff5\102\ufff5" +
    "\103\ufff5\001\002\000\056\013\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\022\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\055\uffbb\056\uffbb\060\uffbb\063\uffbb\001\002" +
    "\000\014\011\uffb4\013\uffb4\022\uffb4\052\uffb4\056\uffb4\001" +
    "\002\000\072\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\016\ufff3\021" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\047\ufff3\061\ufff3\066" +
    "\ufff3\074\ufff3\102\ufff3\103\ufff3\001\002\000\004\013\276" +
    "\001\002\000\014\011\uffb5\013\uffb5\022\uffb5\052\uffb5\056" +
    "\uffb5\001\002\000\072\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\016" +
    "\ufffe\021\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\047\ufffe\061" +
    "\ufffe\066\ufffe\074\ufffe\102\ufffe\103\ufffe\001\002\000\072" +
    "\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\016\ufff4\021\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\047\ufff4\061\ufff4\066\ufff4\074\ufff4" +
    "\102\ufff4\103\ufff4\001\002\000\004\021\256\001\002\000" +
    "\070\002\000\003\035\004\036\005\012\006\033\007\026" +
    "\010\053\011\032\012\030\014\010\016\037\021\004\024" +
    "\016\025\013\026\027\027\006\030\054\031\031\033\023" +
    "\034\046\035\021\036\060\047\024\066\047\074\041\102" +
    "\040\103\015\001\002\000\024\004\036\005\012\006\033" +
    "\007\026\010\053\011\070\016\037\021\004\047\024\001" +
    "\002\000\024\004\036\005\012\006\033\007\026\010\053" +
    "\011\070\016\037\021\004\047\024\001\002\000\072\002" +
    "\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\016\ufff7\021\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\047\ufff7\061\ufff7\066\ufff7\074\ufff7\102" +
    "\ufff7\103\ufff7\001\002\000\056\013\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\022\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\055\uffb8\056\uffb8\060\uffb8\063\uffb8\001" +
    "\002\000\014\011\uffb1\013\uffb1\022\uffb1\052\uffb1\056\uffb1" +
    "\001\002\000\004\011\221\001\002\000\004\021\206\001" +
    "\002\000\052\015\uffb6\016\uffb6\017\uffb6\020\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\052\163\053\uffb6\055\uffb6\056\uffb6" +
    "\062\164\064\162\001\002\000\056\013\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\022\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\055\uffba\056\uffba\060\uffba\063\uffba" +
    "\001\002\000\072\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\016\ufff2" +
    "\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\047\ufff2\061\ufff2" +
    "\066\ufff2\074\ufff2\102\ufff2\103\ufff2\001\002\000\074\002" +
    "\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\161\014\uffed\016\uffed\021\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\047\uffed\061\uffed\066\uffed\074" +
    "\uffed\102\uffed\103\uffed\001\002\000\056\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\022\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\060\uffb9\063" +
    "\uffb9\001\002\000\024\004\036\005\012\006\033\007\026" +
    "\010\053\011\070\016\037\021\004\047\024\001\002\000" +
    "\004\013\157\001\002\000\014\011\uffb0\013\uffb0\022\uffb0" +
    "\052\uffb0\056\uffb0\001\002\000\072\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\014\ufffb\016\ufffb\021\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\047\ufffb\061\ufffb\066\ufffb\074\ufffb\102\ufffb\103\ufffb\001" +
    "\002\000\072\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\016\ufffc\021" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\047\ufffc\061\ufffc\066" +
    "\ufffc\074\ufffc\102\ufffc\103\ufffc\001\002\000\072\002\ufff0" +
    "\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\016\ufff0\021\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\047\ufff0\061\ufff0\066\ufff0\074\ufff0\102\ufff0" +
    "\103\ufff0\001\002\000\072\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\016\ufff9\021\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\047\ufff9" +
    "\061\ufff9\066\ufff9\074\ufff9\102\ufff9\103\ufff9\001\002\000" +
    "\004\021\151\001\002\000\004\055\137\001\002\000\072" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\014\ufffd\016\ufffd\021\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\047\ufffd\061\ufffd\066\ufffd\074\ufffd" +
    "\102\ufffd\103\ufffd\001\002\000\072\002\uffef\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\014\uffef\016\uffef\021\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\047\uffef\061\uffef\066\uffef\074\uffef\102\uffef\103\uffef\001" +
    "\002\000\072\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\016\ufffa\021" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\047\ufffa\061\ufffa\066" +
    "\ufffa\074\ufffa\102\ufffa\103\ufffa\001\002\000\056\013\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\022\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\060" +
    "\uffb7\063\uffb7\001\002\000\014\011\uffb3\013\uffb3\022\uffb3" +
    "\052\uffb3\056\uffb3\001\002\000\004\002\136\001\002\000" +
    "\044\015\103\016\074\017\102\020\106\037\110\040\075" +
    "\041\076\042\105\043\077\044\111\045\072\046\073\050" +
    "\132\051\133\053\107\055\100\056\101\001\002\000\072" +
    "\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\016\ufff6\021\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\047\ufff6\061\ufff6\066\ufff6\074\ufff6" +
    "\102\ufff6\103\ufff6\001\002\000\004\060\062\001\002\000" +
    "\072\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\016\ufff1\021\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\047\ufff1\061\ufff1\066\ufff1\074" +
    "\ufff1\102\ufff1\103\ufff1\001\002\000\066\003\035\004\036" +
    "\005\012\006\033\007\026\010\053\011\032\012\030\014" +
    "\010\016\037\021\004\024\016\025\013\026\027\027\006" +
    "\030\054\031\031\033\023\034\046\035\021\036\060\047" +
    "\024\066\047\074\041\102\040\103\015\001\002\000\070" +
    "\003\035\004\036\005\012\006\033\007\026\010\053\011" +
    "\032\012\030\014\010\016\037\021\004\024\016\025\013" +
    "\026\027\027\006\030\054\031\031\033\023\034\046\035" +
    "\021\036\060\047\024\061\064\066\047\074\041\102\040" +
    "\103\015\001\002\000\004\034\066\001\002\000\072\002" +
    "\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\014\uffff\016\uffff\021\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\047\uffff\061\uffff\066\uffff\074\uffff\102" +
    "\uffff\103\uffff\001\002\000\004\021\067\001\002\000\024" +
    "\004\036\005\012\006\033\007\026\010\053\011\070\016" +
    "\037\021\004\047\024\001\002\000\056\013\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\022\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\060\uffb6\063" +
    "\uffb6\001\002\000\042\015\103\016\074\017\102\020\106" +
    "\022\104\037\110\040\075\041\076\042\105\043\077\044" +
    "\111\045\072\046\073\053\107\055\100\056\101\001\002" +
    "\000\024\004\036\005\012\006\033\007\026\010\053\011" +
    "\070\016\037\021\004\047\024\001\002\000\024\004\036" +
    "\005\012\006\033\007\026\010\053\011\070\016\037\021" +
    "\004\047\024\001\002\000\024\004\036\005\012\006\033" +
    "\007\026\010\053\011\070\016\037\021\004\047\024\001" +
    "\002\000\024\004\036\005\012\006\033\007\026\010\053" +
    "\011\070\016\037\021\004\047\024\001\002\000\024\004" +
    "\036\005\012\006\033\007\026\010\053\011\070\016\037" +
    "\021\004\047\024\001\002\000\024\004\036\005\012\006" +
    "\033\007\026\010\053\011\070\016\037\021\004\047\024" +
    "\001\002\000\024\004\036\005\012\006\033\007\026\010" +
    "\053\011\070\016\037\021\004\047\024\001\002\000\024" +
    "\004\036\005\012\006\033\007\026\010\053\011\070\016" +
    "\037\021\004\047\024\001\002\000\024\004\036\005\012" +
    "\006\033\007\026\010\053\011\070\016\037\021\004\047" +
    "\024\001\002\000\024\004\036\005\012\006\033\007\026" +
    "\010\053\011\070\016\037\021\004\047\024\001\002\000" +
    "\004\013\117\001\002\000\024\004\036\005\012\006\033" +
    "\007\026\010\053\011\070\016\037\021\004\047\024\001" +
    "\002\000\024\004\036\005\012\006\033\007\026\010\053" +
    "\011\070\016\037\021\004\047\024\001\002\000\024\004" +
    "\036\005\012\006\033\007\026\010\053\011\070\016\037" +
    "\021\004\047\024\001\002\000\024\004\036\005\012\006" +
    "\033\007\026\010\053\011\070\016\037\021\004\047\024" +
    "\001\002\000\024\004\036\005\012\006\033\007\026\010" +
    "\053\011\070\016\037\021\004\047\024\001\002\000\056" +
    "\013\uffc0\015\103\016\074\017\102\020\106\022\uffc0\037" +
    "\110\040\075\041\076\042\105\043\077\044\uffc0\045\072" +
    "\046\073\050\uffc0\051\uffc0\052\uffc0\053\107\055\100\056" +
    "\101\060\uffc0\063\uffc0\001\002\000\056\013\uffc7\015\103" +
    "\016\074\017\102\020\106\022\uffc7\037\uffc7\040\075\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\107\055\uffc7\056\uffc7\060\uffc7\063" +
    "\uffc7\001\002\000\056\013\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\022\uffc8\037\uffc8\040\075\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\055\uffc8\056\uffc8\060\uffc8\063\uffc8\001\002\000" +
    "\056\013\uffca\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca" +
    "\037\uffca\040\075\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca" +
    "\056\uffca\060\uffca\063\uffca\001\002\000\056\013\uffc4\015" +
    "\103\016\074\017\102\020\106\022\uffc4\037\uffc4\040\075" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\107\055\uffc4\056\uffc4\060\uffc4" +
    "\063\uffc4\001\002\000\072\002\uffdb\003\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb" +
    "\016\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\047\uffdb" +
    "\061\uffdb\066\uffdb\074\uffdb\102\uffdb\103\uffdb\001\002\000" +
    "\056\013\uffcd\015\uffcd\016\uffcd\017\102\020\106\022\uffcd" +
    "\037\uffcd\040\075\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\107\055\uffcd" +
    "\056\uffcd\060\uffcd\063\uffcd\001\002\000\056\013\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\037\uffcb\040\075" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\060\uffcb" +
    "\063\uffcb\001\002\000\056\013\uffc3\015\103\016\074\017" +
    "\102\020\106\022\uffc3\037\uffc3\040\075\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\107\055\uffc3\056\uffc3\060\uffc3\063\uffc3\001\002" +
    "\000\056\013\uffc5\015\103\016\074\017\102\020\106\022" +
    "\uffc5\037\uffc5\040\075\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\107\055" +
    "\uffc5\056\uffc5\060\uffc5\063\uffc5\001\002\000\056\013\uffc2" +
    "\015\103\016\074\017\102\020\106\022\uffc2\037\uffc2\040" +
    "\075\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\107\055\uffc2\056\uffc2\060" +
    "\uffc2\063\uffc2\001\002\000\056\013\uffc6\015\103\016\074" +
    "\017\102\020\106\022\uffc6\037\uffc6\040\075\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\107\055\uffc6\056\uffc6\060\uffc6\063\uffc6\001" +
    "\002\000\054\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9" +
    "\056\uffc9\060\uffc9\063\uffc9\001\002\000\056\013\uffcc\015" +
    "\uffcc\016\uffcc\017\102\020\106\022\uffcc\037\uffcc\040\075" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\107\055\uffcc\056\uffcc\060\uffcc" +
    "\063\uffcc\001\002\000\056\013\uffbe\015\103\016\074\017" +
    "\102\020\106\022\uffbe\037\110\040\075\041\076\042\105" +
    "\043\077\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\107\055\100\056\101\060\uffbe\063\uffbe\001\002" +
    "\000\056\013\uffbf\015\103\016\074\017\102\020\106\022" +
    "\uffbf\037\110\040\075\041\076\042\105\043\077\044\uffbf" +
    "\045\uffbf\046\073\050\uffbf\051\uffbf\052\uffbf\053\107\055" +
    "\100\056\101\060\uffbf\063\uffbf\001\002\000\004\013\135" +
    "\001\002\000\004\013\134\001\002\000\072\002\uffe7\003" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\014\uffe7\016\uffe7\021\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\047\uffe7\061\uffe7\066\uffe7\074\uffe7\102\uffe7\103" +
    "\uffe7\001\002\000\072\002\uffe8\003\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\016" +
    "\uffe8\021\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\047\uffe8\061" +
    "\uffe8\066\uffe8\074\uffe8\102\uffe8\103\uffe8\001\002\000\004" +
    "\002\001\001\002\000\016\024\016\025\013\026\027\027" +
    "\006\030\054\074\041\001\002\000\004\056\141\001\002" +
    "\000\004\011\142\001\002\000\004\052\143\001\002\000" +
    "\004\067\144\001\002\000\004\066\145\001\002\000\004" +
    "\021\146\001\002\000\004\022\147\001\002\000\004\013" +
    "\150\001\002\000\072\002\uffd3\003\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\016" +
    "\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\047\uffd3\061" +
    "\uffd3\066\uffd3\074\uffd3\102\uffd3\103\uffd3\001\002\000\024" +
    "\004\036\005\012\006\033\007\026\010\053\011\070\016" +
    "\037\021\004\047\024\001\002\000\042\015\103\016\074" +
    "\017\102\020\106\022\153\037\110\040\075\041\076\042" +
    "\105\043\077\044\111\045\072\046\073\053\107\055\100" +
    "\056\101\001\002\000\004\060\154\001\002\000\066\003" +
    "\035\004\036\005\012\006\033\007\026\010\053\011\032" +
    "\012\030\014\010\016\037\021\004\024\016\025\013\026" +
    "\027\027\006\030\054\031\031\033\023\034\046\035\021" +
    "\036\060\047\024\066\047\074\041\102\040\103\015\001" +
    "\002\000\070\003\035\004\036\005\012\006\033\007\026" +
    "\010\053\011\032\012\030\014\010\016\037\021\004\024" +
    "\016\025\013\026\027\027\006\030\054\031\031\033\023" +
    "\034\046\035\021\036\060\047\024\061\156\066\047\074" +
    "\041\102\040\103\015\001\002\000\072\002\uffdc\003\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\014\uffdc\016\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\047\uffdc\061\uffdc\066\uffdc\074\uffdc\102\uffdc\103\uffdc" +
    "\001\002\000\072\002\uffde\003\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde\016\uffde" +
    "\021\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\047\uffde\061\uffde" +
    "\066\uffde\074\uffde\102\uffde\103\uffde\001\002\000\056\013" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce\056\uffce" +
    "\060\uffce\063\uffce\001\002\000\072\002\uffee\003\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\014\uffee\016\uffee\021\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\047\uffee\061\uffee\066\uffee\074\uffee\102\uffee\103\uffee\001" +
    "\002\000\006\070\174\071\175\001\002\000\024\004\036" +
    "\005\012\006\033\007\026\010\053\011\070\016\037\021" +
    "\004\047\024\001\002\000\024\004\036\005\012\006\033" +
    "\007\026\010\053\011\070\016\037\021\004\047\024\001" +
    "\002\000\042\015\103\016\074\017\102\020\106\037\110" +
    "\040\075\041\076\042\105\043\077\044\111\045\072\046" +
    "\073\053\107\055\100\056\101\063\166\001\002\000\074" +
    "\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\014\uffd2\016\uffd2\021\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\047\uffd2\052\167\061\uffd2\066\uffd2" +
    "\074\uffd2\102\uffd2\103\uffd2\001\002\000\024\004\036\005" +
    "\012\006\033\007\026\010\053\011\070\016\037\021\004" +
    "\047\024\001\002\000\042\013\171\015\103\016\074\017" +
    "\102\020\106\037\110\040\075\041\076\042\105\043\077" +
    "\044\111\045\072\046\073\053\107\055\100\056\101\001" +
    "\002\000\072\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\016\uffd1\021" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\047\uffd1\061\uffd1\066" +
    "\uffd1\074\uffd1\102\uffd1\103\uffd1\001\002\000\042\013\173" +
    "\015\103\016\074\017\102\020\106\037\110\040\075\041" +
    "\076\042\105\043\077\044\111\045\072\046\073\053\107" +
    "\055\100\056\101\001\002\000\072\002\uffe9\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\016\uffe9\021\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\047\uffe9\061\uffe9\066\uffe9\074\uffe9\102\uffe9\103\uffe9\001" +
    "\002\000\004\021\202\001\002\000\004\021\176\001\002" +
    "\000\024\004\036\005\012\006\033\007\026\010\053\011" +
    "\070\016\037\021\004\047\024\001\002\000\042\015\103" +
    "\016\074\017\102\020\106\022\200\037\110\040\075\041" +
    "\076\042\105\043\077\044\111\045\072\046\073\053\107" +
    "\055\100\056\101\001\002\000\004\013\201\001\002\000" +
    "\072\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\014\uffcf\016\uffcf\021\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\047\uffcf\061\uffcf\066\uffcf\074" +
    "\uffcf\102\uffcf\103\uffcf\001\002\000\024\004\036\005\012" +
    "\006\033\007\026\010\053\011\070\016\037\021\004\047" +
    "\024\001\002\000\042\015\103\016\074\017\102\020\106" +
    "\022\204\037\110\040\075\041\076\042\105\043\077\044" +
    "\111\045\072\046\073\053\107\055\100\056\101\001\002" +
    "\000\004\013\205\001\002\000\072\002\uffd0\003\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\014\uffd0\016\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\047\uffd0\061\uffd0\066\uffd0\074\uffd0\102\uffd0\103\uffd0\001" +
    "\002\000\024\004\036\005\012\006\033\007\026\010\053" +
    "\011\070\016\037\021\004\047\024\001\002\000\042\015" +
    "\103\016\074\017\102\020\106\022\210\037\110\040\075" +
    "\041\076\042\105\043\077\044\111\045\072\046\073\053" +
    "\107\055\100\056\101\001\002\000\004\060\211\001\002" +
    "\000\066\003\035\004\036\005\012\006\033\007\026\010" +
    "\053\011\032\012\030\014\010\016\037\021\004\024\016" +
    "\025\013\026\027\027\006\030\054\031\031\033\023\034" +
    "\046\035\021\036\060\047\024\066\047\074\041\102\040" +
    "\103\015\001\002\000\070\003\035\004\036\005\012\006" +
    "\033\007\026\010\053\011\032\012\030\014\010\016\037" +
    "\021\004\024\016\025\013\026\027\027\006\030\054\031" +
    "\031\033\023\034\046\035\021\036\060\047\024\061\213" +
    "\066\047\074\041\102\040\103\015\001\002\000\074\002" +
    "\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\014\uffe5\016\uffe5\021\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\214\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\047\uffe5\061\uffe5\066\uffe5\074" +
    "\uffe5\102\uffe5\103\uffe5\001\002\000\006\031\031\060\216" +
    "\001\002\000\072\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\016\uffe3" +
    "\021\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\047\uffe3\061\uffe3" +
    "\066\uffe3\074\uffe3\102\uffe3\103\uffe3\001\002\000\066\003" +
    "\035\004\036\005\012\006\033\007\026\010\053\011\032" +
    "\012\030\014\010\016\037\021\004\024\016\025\013\026" +
    "\027\027\006\030\054\031\031\033\023\034\046\035\021" +
    "\036\060\047\024\066\047\074\041\102\040\103\015\001" +
    "\002\000\070\003\035\004\036\005\012\006\033\007\026" +
    "\010\053\011\032\012\030\014\010\016\037\021\004\024" +
    "\016\025\013\026\027\027\006\030\054\031\031\033\023" +
    "\034\046\035\021\036\060\047\024\061\220\066\047\074" +
    "\041\102\040\103\015\001\002\000\072\002\uffe4\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\014\uffe4\016\uffe4\021\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\047\uffe4\061\uffe4\066\uffe4\074\uffe4\102\uffe4\103\uffe4" +
    "\001\002\000\004\057\222\001\002\000\016\024\016\025" +
    "\013\026\027\027\006\030\054\074\041\001\002\000\006" +
    "\013\224\052\225\001\002\000\072\002\uffea\003\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\014\uffea\016\uffea\021\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\047\uffea\061\uffea\066\uffea\074\uffea\102\uffea\103\uffea\001" +
    "\002\000\024\004\036\005\012\006\033\007\026\010\053" +
    "\011\070\016\037\021\004\047\024\001\002\000\042\013" +
    "\227\015\103\016\074\017\102\020\106\037\110\040\075" +
    "\041\076\042\105\043\077\044\111\045\072\046\073\053" +
    "\107\055\100\056\101\001\002\000\072\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\014\uffeb\016\uffeb\021\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\047\uffeb\061\uffeb\066\uffeb\074\uffeb\102\uffeb\103\uffeb" +
    "\001\002\000\056\013\uffc1\015\103\016\074\017\102\020" +
    "\106\022\uffc1\037\110\040\075\041\076\042\105\043\077" +
    "\044\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\107\055\100\056\101\060\uffc1\063\uffc1\001\002\000\042" +
    "\015\103\016\074\017\102\020\106\037\110\040\075\041" +
    "\076\042\105\043\077\044\111\045\072\046\073\053\107" +
    "\055\100\056\101\060\232\001\002\000\026\004\036\005" +
    "\012\006\033\007\026\010\053\011\070\016\037\021\004" +
    "\047\024\054\235\001\002\000\030\004\036\005\012\006" +
    "\033\007\026\010\053\011\070\016\037\021\004\047\024" +
    "\054\254\061\253\001\002\000\030\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\016\uffd6\021\uffd6\047\uffd6" +
    "\054\uffd6\061\uffd6\001\002\000\006\052\244\061\245\001" +
    "\002\000\042\015\103\016\074\017\102\020\106\037\110" +
    "\040\075\041\076\042\105\043\077\044\111\045\072\046" +
    "\073\052\237\053\107\055\100\056\101\001\002\000\004" +
    "\056\240\001\002\000\004\060\241\001\002\000\066\003" +
    "\035\004\036\005\012\006\033\007\026\010\053\011\032" +
    "\012\030\014\010\016\037\021\004\024\016\025\013\026" +
    "\027\027\006\030\054\031\031\033\023\034\046\035\021" +
    "\036\060\047\024\066\047\074\041\102\040\103\015\001" +
    "\002\000\070\003\035\004\036\005\012\006\033\007\026" +
    "\010\053\011\032\012\030\014\010\016\037\021\004\024" +
    "\016\025\013\026\027\027\006\030\054\031\031\033\023" +
    "\034\046\035\021\036\060\047\024\061\243\066\047\074" +
    "\041\102\040\103\015\001\002\000\030\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\016\uffd5\021\uffd5\047" +
    "\uffd5\054\uffd5\061\uffd5\001\002\000\004\056\246\001\002" +
    "\000\072\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\016\uffd8\021\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\047\uffd8\061\uffd8\066\uffd8" +
    "\074\uffd8\102\uffd8\103\uffd8\001\002\000\004\060\247\001" +
    "\002\000\066\003\035\004\036\005\012\006\033\007\026" +
    "\010\053\011\032\012\030\014\010\016\037\021\004\024" +
    "\016\025\013\026\027\027\006\030\054\031\031\033\023" +
    "\034\046\035\021\036\060\047\024\066\047\074\041\102" +
    "\040\103\015\001\002\000\070\003\035\004\036\005\012" +
    "\006\033\007\026\010\053\011\032\012\030\014\010\016" +
    "\037\021\004\024\016\025\013\026\027\027\006\030\054" +
    "\031\031\033\023\034\046\035\021\036\060\047\024\061" +
    "\251\066\047\074\041\102\040\103\015\001\002\000\030" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\016" +
    "\uffd4\021\uffd4\047\uffd4\054\uffd4\061\uffd4\001\002\000\030" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\016" +
    "\uffd7\021\uffd7\047\uffd7\054\uffd7\061\uffd7\001\002\000\072" +
    "\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\014\uffd9\016\uffd9\021\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\047\uffd9\061\uffd9\066\uffd9\074\uffd9" +
    "\102\uffd9\103\uffd9\001\002\000\006\052\244\061\255\001" +
    "\002\000\072\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\014\uffda\016\uffda\021" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\047\uffda\061\uffda\066" +
    "\uffda\074\uffda\102\uffda\103\uffda\001\002\000\024\004\036" +
    "\005\012\006\033\007\026\010\053\011\257\016\037\021" +
    "\004\047\024\001\002\000\046\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\163\053\uffb6" +
    "\055\uffb6\056\uffb6\001\002\000\024\004\036\005\012\006" +
    "\033\007\026\010\053\011\070\016\037\021\004\047\024" +
    "\001\002\000\042\013\262\015\103\016\074\017\102\020" +
    "\106\037\110\040\075\041\076\042\105\043\077\044\111" +
    "\045\072\046\073\053\107\055\100\056\101\001\002\000" +
    "\024\004\036\005\012\006\033\007\026\010\053\011\264" +
    "\016\037\021\004\047\024\001\002\000\004\022\272\001" +
    "\002\000\046\015\uffb6\016\uffb6\017\uffb6\020\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\052\270\053\uffb6\055\uffb6\056\uffb6" +
    "\001\002\000\044\015\103\016\074\017\102\020\106\037" +
    "\110\040\075\041\076\042\105\043\077\044\111\045\072" +
    "\046\073\050\266\051\267\053\107\055\100\056\101\001" +
    "\002\000\004\022\uffe0\001\002\000\004\022\uffdf\001\002" +
    "\000\024\004\036\005\012\006\033\007\026\010\053\011" +
    "\070\016\037\021\004\047\024\001\002\000\042\015\103" +
    "\016\074\017\102\020\106\022\uffe1\037\110\040\075\041" +
    "\076\042\105\043\077\044\111\045\072\046\073\053\107" +
    "\055\100\056\101\001\002\000\004\060\273\001\002\000" +
    "\066\003\035\004\036\005\012\006\033\007\026\010\053" +
    "\011\032\012\030\014\010\016\037\021\004\024\016\025" +
    "\013\026\027\027\006\030\054\031\031\033\023\034\046" +
    "\035\021\036\060\047\024\066\047\074\041\102\040\103" +
    "\015\001\002\000\070\003\035\004\036\005\012\006\033" +
    "\007\026\010\053\011\032\012\030\014\010\016\037\021" +
    "\004\024\016\025\013\026\027\027\006\030\054\031\031" +
    "\033\023\034\046\035\021\036\060\047\024\061\275\066" +
    "\047\074\041\102\040\103\015\001\002\000\072\002\uffe2" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\016\uffe2\021\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\047\uffe2\061\uffe2\066\uffe2\074\uffe2\102\uffe2" +
    "\103\uffe2\001\002\000\072\002\uffdd\003\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd" +
    "\016\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\047\uffdd" +
    "\061\uffdd\066\uffdd\074\uffdd\102\uffdd\103\uffdd\001\002\000" +
    "\024\004\036\005\012\006\033\007\026\010\053\011\070" +
    "\016\037\021\004\047\024\001\002\000\042\015\103\016" +
    "\074\017\102\020\106\022\301\037\110\040\075\041\076" +
    "\042\105\043\077\044\111\045\072\046\073\053\107\055" +
    "\100\056\101\001\002\000\004\013\302\001\002\000\072" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\014\uffec\016\uffec\021\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\047\uffec\061\uffec\066\uffec\074\uffec" +
    "\102\uffec\103\uffec\001\002\000\004\021\304\001\002\000" +
    "\004\022\305\001\002\000\004\060\306\001\002\000\066" +
    "\003\035\004\036\005\012\006\033\007\026\010\053\011" +
    "\032\012\030\014\010\016\037\021\004\024\016\025\013" +
    "\026\027\027\006\030\054\031\031\033\023\034\046\035" +
    "\021\036\060\047\024\066\047\074\041\102\040\103\015" +
    "\001\002\000\070\003\035\004\036\005\012\006\033\007" +
    "\026\010\053\011\032\012\030\014\010\016\037\021\004" +
    "\024\016\025\013\026\027\027\006\030\054\031\031\033" +
    "\023\034\046\035\021\036\060\047\024\061\310\066\047" +
    "\074\041\102\040\103\015\001\002\000\072\002\uffe6\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\016\uffe6\021\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\047\uffe6\061\uffe6\066\uffe6\074\uffe6\102\uffe6\103" +
    "\uffe6\001\002\000\042\015\103\016\074\017\102\020\106" +
    "\022\315\037\110\040\075\041\076\042\105\043\077\044" +
    "\111\045\072\046\073\053\107\055\100\056\101\001\002" +
    "\000\004\022\313\001\002\000\024\004\036\005\012\006" +
    "\033\007\026\010\053\011\070\016\037\021\004\047\024" +
    "\001\002\000\056\013\uffbc\015\103\016\074\017\102\020" +
    "\106\022\uffbc\037\110\040\075\041\076\042\105\043\077" +
    "\044\111\045\072\046\073\050\uffbc\051\uffbc\052\uffbc\053" +
    "\107\055\100\056\101\060\uffbc\063\uffbc\001\002\000\056" +
    "\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056" +
    "\uffbd\060\uffbd\063\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\052\002\054\003\021\004\016\005\055\006" +
    "\042\007\041\010\047\011\051\012\006\013\044\015\024" +
    "\016\056\021\004\022\010\023\017\024\013\025\033\026" +
    "\060\027\043\030\050\001\001\000\006\005\310\021\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\064\005\055\006\042\007\041\010" +
    "\047\011\051\012\006\013\044\015\024\016\056\021\004" +
    "\022\010\023\017\024\013\025\033\026\060\027\043\030" +
    "\050\001\001\000\004\005\230\001\001\000\004\005\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\062\004\016\005\055\006\042" +
    "\007\041\010\047\011\051\012\006\013\044\015\024\016" +
    "\056\021\004\022\010\023\017\024\013\025\033\026\060" +
    "\027\043\030\050\001\001\000\046\004\064\005\055\006" +
    "\042\007\041\010\047\011\051\012\006\013\044\015\024" +
    "\016\056\021\004\022\010\023\017\024\013\025\033\026" +
    "\060\027\043\030\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\130\001\001" +
    "\000\004\005\127\001\001\000\004\005\126\001\001\000" +
    "\004\005\125\001\001\000\004\005\124\001\001\000\004" +
    "\005\123\001\001\000\004\005\122\001\001\000\004\005" +
    "\121\001\001\000\004\005\120\001\001\000\004\005\117" +
    "\001\001\000\002\001\001\000\004\005\115\001\001\000" +
    "\004\005\114\001\001\000\004\005\113\001\001\000\004" +
    "\005\112\001\001\000\004\005\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\154\004\016" +
    "\005\055\006\042\007\041\010\047\011\051\012\006\013" +
    "\044\015\024\016\056\021\004\022\010\023\017\024\013" +
    "\025\033\026\060\027\043\030\050\001\001\000\046\004" +
    "\064\005\055\006\042\007\041\010\047\011\051\012\006" +
    "\013\044\015\024\016\056\021\004\022\010\023\017\024" +
    "\013\025\033\026\060\027\043\030\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\171\001\001\000\004" +
    "\005\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\211\004\016\005\055\006\042\007\041" +
    "\010\047\011\051\012\006\013\044\015\024\016\056\021" +
    "\004\022\010\023\017\024\013\025\033\026\060\027\043" +
    "\030\050\001\001\000\046\004\064\005\055\006\042\007" +
    "\041\010\047\011\051\012\006\013\044\015\024\016\056" +
    "\021\004\022\010\023\017\024\013\025\033\026\060\027" +
    "\043\030\050\001\001\000\002\001\001\000\004\011\214" +
    "\001\001\000\002\001\001\000\050\003\216\004\016\005" +
    "\055\006\042\007\041\010\047\011\051\012\006\013\044" +
    "\015\024\016\056\021\004\022\010\023\017\024\013\025" +
    "\033\026\060\027\043\030\050\001\001\000\046\004\064" +
    "\005\055\006\042\007\041\010\047\011\051\012\006\013" +
    "\044\015\024\016\056\021\004\022\010\023\017\024\013" +
    "\025\033\026\060\027\043\030\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\235\017\232\020\233\001\001\000" +
    "\006\005\235\020\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\241\004\016\005\055\006\042\007\041" +
    "\010\047\011\051\012\006\013\044\015\024\016\056\021" +
    "\004\022\010\023\017\024\013\025\033\026\060\027\043" +
    "\030\050\001\001\000\046\004\064\005\055\006\042\007" +
    "\041\010\047\011\051\012\006\013\044\015\024\016\056" +
    "\021\004\022\010\023\017\024\013\025\033\026\060\027" +
    "\043\030\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\247\004" +
    "\016\005\055\006\042\007\041\010\047\011\051\012\006" +
    "\013\044\015\024\016\056\021\004\022\010\023\017\024" +
    "\013\025\033\026\060\027\043\030\050\001\001\000\046" +
    "\004\064\005\055\006\042\007\041\010\047\011\051\012" +
    "\006\013\044\015\024\016\056\021\004\022\010\023\017" +
    "\024\013\025\033\026\060\027\043\030\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\055\007\257\001" +
    "\001\000\002\001\001\000\004\005\260\001\001\000\002" +
    "\001\001\000\006\005\264\014\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\273\004\016\005\055" +
    "\006\042\007\041\010\047\011\051\012\006\013\044\015" +
    "\024\016\056\021\004\022\010\023\017\024\013\025\033" +
    "\026\060\027\043\030\050\001\001\000\046\004\064\005" +
    "\055\006\042\007\041\010\047\011\051\012\006\013\044" +
    "\015\024\016\056\021\004\022\010\023\017\024\013\025" +
    "\033\026\060\027\043\030\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\306\004" +
    "\016\005\055\006\042\007\041\010\047\011\051\012\006" +
    "\013\044\015\024\016\056\021\004\022\010\023\017\024" +
    "\013\025\033\026\060\027\043\030\050\001\001\000\046" +
    "\004\064\005\055\006\042\007\041\010\047\011\051\012" +
    "\006\013\044\015\024\016\056\021\004\022\010\023\017" +
    "\024\013\025\033\026\060\027\043\030\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\313\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s) {this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s ){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

   

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT=a;      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DECLARACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= ACCESO_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= NATIVO_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= error FININSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    RESULT = new Print(aleft, aright, a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(c, aleft, aright, b, d, a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(c, aleft, aright, b, a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= ID IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= EXPRESION INCREMENTO FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Incremento(aleft, aright, a);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= EXPRESION DECREMENTO FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Decremento(aleft, aright, a);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(a, aleft, aright, b, c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new If(aleft, aright, a, b);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new IfElse(aleft, aright, a, b, c);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new IfElseIf(aleft, aright, a, b, c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FININSTRUCCION ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new For(aleft, aright, a, b, c, d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ACTUALIZA_FOR ::= EXPRESION INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Incremento(aleft, aright, a);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ACTUALIZA_FOR ::= EXPRESION DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Decremento(aleft, aright, a);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BREAKK ::= BREAK FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTINUEE ::= CONTINUE FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new While(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    RESULT = new DoWhile(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, b, (Caso) c);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, b, null);           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SMATCH ::= MATCH EXPRESION LLAVE1 DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, new LinkedList<Caso>(), (Caso) c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASO ::= EXPRESION IGUAL MAYORQUE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Caso(a, b, true);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASO ::= DEFAULT IGUAL MAYORQUE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Caso(null, b, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_LIST ::= LIST MENORQUE TIPOS MAYORQUE ID IGUAL NEW LIST PAR1 PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		      RESULT = new DeclaracionList(a, aleft, aright, b);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ACCESO_LIST ::= ID CORCH1 EXPRESION CORCH2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		        RESULT= new AccesoList(aleft, aright, a, b);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_LIST",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION_LIST ::= ID CORCH1 EXPRESION CORCH2 IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new AsignacionList(aleft, aright, a, b, c);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_LIST",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NATIVO_LIST ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new Append(aleft, aright, a, b);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIVO_LIST",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NATIVO_LIST ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new Remove(aleft, aright, a, b);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIVO_LIST",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, OperadoresAritmeticos.NEGACION, a);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.SUMA);                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.RESTA);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION MULTIPLICAR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MULTIPLICACION);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.DIVISION);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.POTENCIA);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MODULO);                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.IGUALACION);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION DIFERENCIACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.DIFERENCIACION);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORQUE);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MENORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORIGUALQUE);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORQUE);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MAYORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORIGUALQUE);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, OperadoresLogicos.NOT, a);                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.OR);                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.AND);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.XOR);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;                                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Casteo(a, aleft, aright, b);                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.ENTERO), aleft, aright, Integer.parseInt(a));           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.DECIMAL), aleft, aright, new Double(a));                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.CADENA), aleft, aright, a);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.CARACTER), aleft, aright, a);                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.BOOLEANO), aleft, aright, Boolean.parseBoolean(a));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(aleft, aright, a);                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.VOID);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
