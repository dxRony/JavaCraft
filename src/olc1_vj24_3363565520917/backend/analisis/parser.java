
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1_vj24_3363565520917.backend.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_vj24_3363565520917.backend.abstracto.Instruccion;
import olc1_vj24_3363565520917.backend.simbolo.Tipo;
import olc1_vj24_3363565520917.backend.simbolo.tipoDato;
import olc1_vj24_3363565520917.backend.excepciones.Errores;
import java.util.HashMap;
import olc1_vj24_3363565520917.backend.instrucciones.Print;
import olc1_vj24_3363565520917.backend.instrucciones.Declaracion;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVar;
import olc1_vj24_3363565520917.backend.instrucciones.If;
import olc1_vj24_3363565520917.backend.instrucciones.IfElse;
import olc1_vj24_3363565520917.backend.instrucciones.IfElseIf;
import olc1_vj24_3363565520917.backend.instrucciones.Caso;
import olc1_vj24_3363565520917.backend.instrucciones.Match;
import olc1_vj24_3363565520917.backend.instrucciones.For;
import olc1_vj24_3363565520917.backend.instrucciones.While;
import olc1_vj24_3363565520917.backend.instrucciones.DoWhile;
import olc1_vj24_3363565520917.backend.instrucciones.Break;
import olc1_vj24_3363565520917.backend.instrucciones.Continue;
import olc1_vj24_3363565520917.backend.instrucciones.Metodo;
import olc1_vj24_3363565520917.backend.instrucciones.Append;
import olc1_vj24_3363565520917.backend.instrucciones.Remove;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionList;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionList;
import olc1_vj24_3363565520917.backend.instrucciones.StartWith;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVector;
import olc1_vj24_3363565520917.backend.instrucciones.DeclaracionVector;
import olc1_vj24_3363565520917.backend.expresiones.Nativo;
import olc1_vj24_3363565520917.backend.expresiones.Aritmeticas;
import olc1_vj24_3363565520917.backend.expresiones.Relacionales;
import olc1_vj24_3363565520917.backend.expresiones.Logicos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresAritmeticos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresRelacionales;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresLogicos;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVar;
import olc1_vj24_3363565520917.backend.expresiones.Casteo;
import olc1_vj24_3363565520917.backend.expresiones.Incremento;
import olc1_vj24_3363565520917.backend.expresiones.Decremento;
import olc1_vj24_3363565520917.backend.expresiones.AccesoList;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\010\007\000\002\006\011\000\002" +
    "\006\007\000\002\007\006\000\002\007\005\000\002\007" +
    "\005\000\002\024\012\000\002\024\011\000\002\025\006" +
    "\000\002\025\004\000\002\026\010\000\002\026\007\000" +
    "\002\027\005\000\002\027\003\000\002\011\011\000\002" +
    "\011\015\000\002\011\013\000\002\013\014\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\022\004" +
    "\000\002\023\004\000\002\015\011\000\002\016\013\000" +
    "\002\012\010\000\002\012\007\000\002\012\007\000\002" +
    "\017\004\000\002\017\003\000\002\020\010\000\002\020" +
    "\010\000\002\030\015\000\002\031\011\000\002\032\011" +
    "\000\002\032\011\000\002\033\015\000\002\033\017\000" +
    "\002\035\005\000\002\035\003\000\002\036\007\000\002" +
    "\036\005\000\002\034\011\000\002\034\014\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\006\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\011\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\070\003\040\004\041\005\013\006\035\007" +
    "\030\010\057\011\034\012\031\014\011\016\042\021\005" +
    "\024\020\025\014\026\032\027\007\030\060\031\033\033" +
    "\025\034\052\035\023\036\064\047\026\066\053\074\045" +
    "\101\037\102\044\103\017\001\002\000\074\002\uffee\003" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\014\uffee\016\uffee\021\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\047\uffee\061\uffee\066\uffee\074\uffee\101\uffee\102" +
    "\uffee\103\uffee\001\002\000\040\004\041\005\013\006\035" +
    "\007\030\010\057\011\073\016\042\021\005\024\020\025" +
    "\014\026\032\027\007\030\060\047\026\074\045\001\002" +
    "\000\004\011\375\001\002\000\016\011\uff9f\013\uff9f\022" +
    "\uff9f\052\uff9f\056\uff9f\062\uff9f\001\002\000\074\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\016\ufff8\021\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\047\ufff8\061\ufff8\066\ufff8\074\ufff8\101\ufff8" +
    "\102\ufff8\103\ufff8\001\002\000\004\021\371\001\002\000" +
    "\074\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\014\ufff5\016\ufff5\021\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\047\ufff5\061\ufff5\066\ufff5\074" +
    "\ufff5\101\ufff5\102\ufff5\103\ufff5\001\002\000\060\013\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\022\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056\uffab\060" +
    "\uffab\063\uffab\065\uffab\001\002\000\016\011\uffa1\013\uffa1" +
    "\022\uffa1\052\uffa1\056\uffa1\062\uffa1\001\002\000\074\002" +
    "\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\014\ufff3\016\ufff3\021\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\047\ufff3\061\ufff3\066\ufff3\074\ufff3\101" +
    "\ufff3\102\ufff3\103\ufff3\001\002\000\074\002\uffed\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\016\uffed\021\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\047\uffed\061\uffed\066\uffed\074\uffed\101\uffed\102\uffed" +
    "\103\uffed\001\002\000\004\013\370\001\002\000\016\011" +
    "\uffa2\013\uffa2\022\uffa2\052\uffa2\056\uffa2\062\uffa2\001\002" +
    "\000\074\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\016\ufffe\021\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\047\ufffe\061\ufffe\066\ufffe" +
    "\074\ufffe\101\ufffe\102\ufffe\103\ufffe\001\002\000\074\002" +
    "\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\016\ufff4\021\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\047\ufff4\061\ufff4\066\ufff4\074\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\001\002\000\004\021\350\001\002" +
    "\000\072\002\000\003\040\004\041\005\013\006\035\007" +
    "\030\010\057\011\034\012\031\014\011\016\042\021\005" +
    "\024\020\025\014\026\032\027\007\030\060\031\033\033" +
    "\025\034\052\035\023\036\064\047\026\066\053\074\045" +
    "\101\037\102\044\103\017\001\002\000\024\004\041\005" +
    "\013\006\035\007\030\010\057\011\073\016\042\021\005" +
    "\047\026\001\002\000\024\004\041\005\013\006\035\007" +
    "\030\010\057\011\073\016\042\021\005\047\026\001\002" +
    "\000\074\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\016\ufff7\021\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\047\ufff7\061\ufff7\066\ufff7" +
    "\074\ufff7\101\ufff7\102\ufff7\103\ufff7\001\002\000\060\013" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\060\uffa8\063\uffa8\065\uffa8\001\002\000\004\011\263\001" +
    "\002\000\016\011\uff9e\013\uff9e\022\uff9e\052\uff9e\056\uff9e" +
    "\062\uff9e\001\002\000\004\021\250\001\002\000\054\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\213\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050" +
    "\uffa6\051\uffa6\052\211\053\uffa6\055\uffa6\056\uffa6\062\212" +
    "\064\210\001\002\000\060\013\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\022\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\055\uffaa\056\uffaa\060\uffaa\063\uffaa\065\uffaa" +
    "\001\002\000\074\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\016\ufff1" +
    "\021\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\047\ufff1\061\ufff1" +
    "\066\ufff1\074\ufff1\101\ufff1\102\ufff1\103\ufff1\001\002\000" +
    "\004\011\176\001\002\000\076\002\uffeb\003\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\175\014\uffeb\016\uffeb\021\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\047\uffeb\061\uffeb\066\uffeb\074\uffeb\101\uffeb\102\uffeb" +
    "\103\uffeb\001\002\000\060\013\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\022\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\055\uffa9\056\uffa9\060\uffa9\063\uffa9\065\uffa9" +
    "\001\002\000\024\004\041\005\013\006\035\007\030\010" +
    "\057\011\073\016\042\021\005\047\026\001\002\000\074" +
    "\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\014\ufff2\016\ufff2\021\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\047\ufff2\061\ufff2\066\ufff2\074\ufff2" +
    "\101\ufff2\102\ufff2\103\ufff2\001\002\000\004\013\173\001" +
    "\002\000\016\011\uff9d\013\uff9d\022\uff9d\052\uff9d\056\uff9d" +
    "\062\uff9d\001\002\000\074\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\016\ufffb\021\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\047\ufffb" +
    "\061\ufffb\066\ufffb\074\ufffb\101\ufffb\102\ufffb\103\ufffb\001" +
    "\002\000\074\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\016\ufffc\021" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\047\ufffc\061\ufffc\066" +
    "\ufffc\074\ufffc\101\ufffc\102\ufffc\103\ufffc\001\002\000\074" +
    "\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\016\ufff0\021\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\047\ufff0\061\ufff0\066\ufff0\074\ufff0" +
    "\101\ufff0\102\ufff0\103\ufff0\001\002\000\074\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\014\ufff9\016\ufff9\021\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\047\ufff9\061\ufff9\066\ufff9\074\ufff9\101\ufff9\102" +
    "\ufff9\103\ufff9\001\002\000\004\021\165\001\002\000\004" +
    "\055\153\001\002\000\074\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\016\ufffd\021\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\047\ufffd" +
    "\061\ufffd\066\ufffd\074\ufffd\101\ufffd\102\ufffd\103\ufffd\001" +
    "\002\000\074\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef\016\uffef\021" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\047\uffef\061\uffef\066" +
    "\uffef\074\uffef\101\uffef\102\uffef\103\uffef\001\002\000\074" +
    "\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\016\ufffa\021\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\047\ufffa\061\ufffa\066\ufffa\074\ufffa" +
    "\101\ufffa\102\ufffa\103\ufffa\001\002\000\060\013\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\022\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\060\uffa7" +
    "\063\uffa7\065\uffa7\001\002\000\016\011\uffa0\013\uffa0\022" +
    "\uffa0\052\uffa0\056\uffa0\062\uffa0\001\002\000\004\002\152" +
    "\001\002\000\044\015\106\016\077\017\105\020\111\037" +
    "\113\040\100\041\101\042\110\043\102\044\114\045\075" +
    "\046\076\050\146\051\147\053\112\055\103\056\104\001" +
    "\002\000\074\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\016\ufff6\021" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\047\ufff6\061\ufff6\066" +
    "\ufff6\074\ufff6\101\ufff6\102\ufff6\103\ufff6\001\002\000\004" +
    "\060\065\001\002\000\070\003\040\004\041\005\013\006" +
    "\035\007\030\010\057\011\034\012\031\014\011\016\042" +
    "\021\005\024\020\025\014\026\032\027\007\030\060\031" +
    "\033\033\025\034\052\035\023\036\064\047\026\066\053" +
    "\074\045\101\037\102\044\103\017\001\002\000\072\003" +
    "\040\004\041\005\013\006\035\007\030\010\057\011\034" +
    "\012\031\014\011\016\042\021\005\024\020\025\014\026" +
    "\032\027\007\030\060\031\033\033\025\034\052\035\023" +
    "\036\064\047\026\061\067\066\053\074\045\101\037\102" +
    "\044\103\017\001\002\000\004\034\071\001\002\000\074" +
    "\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\014\uffff\016\uffff\021\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\047\uffff\061\uffff\066\uffff\074\uffff" +
    "\101\uffff\102\uffff\103\uffff\001\002\000\004\021\072\001" +
    "\002\000\024\004\041\005\013\006\035\007\030\010\057" +
    "\011\073\016\042\021\005\047\026\001\002\000\064\013" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\136\022\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6" +
    "\056\uffa6\060\uffa6\062\135\063\uffa6\065\uffa6\001\002\000" +
    "\042\015\106\016\077\017\105\020\111\022\107\037\113" +
    "\040\100\041\101\042\110\043\102\044\114\045\075\046" +
    "\076\053\112\055\103\056\104\001\002\000\024\004\041" +
    "\005\013\006\035\007\030\010\057\011\073\016\042\021" +
    "\005\047\026\001\002\000\024\004\041\005\013\006\035" +
    "\007\030\010\057\011\073\016\042\021\005\047\026\001" +
    "\002\000\024\004\041\005\013\006\035\007\030\010\057" +
    "\011\073\016\042\021\005\047\026\001\002\000\024\004" +
    "\041\005\013\006\035\007\030\010\057\011\073\016\042" +
    "\021\005\047\026\001\002\000\024\004\041\005\013\006" +
    "\035\007\030\010\057\011\073\016\042\021\005\047\026" +
    "\001\002\000\024\004\041\005\013\006\035\007\030\010" +
    "\057\011\073\016\042\021\005\047\026\001\002\000\024" +
    "\004\041\005\013\006\035\007\030\010\057\011\073\016" +
    "\042\021\005\047\026\001\002\000\024\004\041\005\013" +
    "\006\035\007\030\010\057\011\073\016\042\021\005\047" +
    "\026\001\002\000\024\004\041\005\013\006\035\007\030" +
    "\010\057\011\073\016\042\021\005\047\026\001\002\000" +
    "\024\004\041\005\013\006\035\007\030\010\057\011\073" +
    "\016\042\021\005\047\026\001\002\000\004\013\122\001" +
    "\002\000\024\004\041\005\013\006\035\007\030\010\057" +
    "\011\073\016\042\021\005\047\026\001\002\000\024\004" +
    "\041\005\013\006\035\007\030\010\057\011\073\016\042" +
    "\021\005\047\026\001\002\000\024\004\041\005\013\006" +
    "\035\007\030\010\057\011\073\016\042\021\005\047\026" +
    "\001\002\000\024\004\041\005\013\006\035\007\030\010" +
    "\057\011\073\016\042\021\005\047\026\001\002\000\024" +
    "\004\041\005\013\006\035\007\030\010\057\011\073\016" +
    "\042\021\005\047\026\001\002\000\060\013\uffb0\015\106" +
    "\016\077\017\105\020\111\022\uffb0\037\113\040\100\041" +
    "\101\042\110\043\102\044\uffb0\045\075\046\076\050\uffb0" +
    "\051\uffb0\052\uffb0\053\112\055\103\056\104\060\uffb0\063" +
    "\uffb0\065\uffb0\001\002\000\060\013\uffb7\015\106\016\077" +
    "\017\105\020\111\022\uffb7\037\uffb7\040\100\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\112\055\uffb7\056\uffb7\060\uffb7\063\uffb7\065" +
    "\uffb7\001\002\000\060\013\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\022\uffb8\037\uffb8\040\100\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\055\uffb8\056\uffb8\060\uffb8\063\uffb8\065\uffb8\001" +
    "\002\000\060\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\022\uffba\037\uffba\040\100\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\055\uffba\056\uffba\060\uffba\063\uffba\065\uffba\001\002\000" +
    "\060\013\uffb4\015\106\016\077\017\105\020\111\022\uffb4" +
    "\037\uffb4\040\100\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\112\055\uffb4" +
    "\056\uffb4\060\uffb4\063\uffb4\065\uffb4\001\002\000\074\002" +
    "\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\014\uffd2\016\uffd2\021\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\047\uffd2\061\uffd2\066\uffd2\074\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\001\002\000\060\013\uffbd\015\uffbd" +
    "\016\uffbd\017\105\020\111\022\uffbd\037\uffbd\040\100\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\112\055\uffbd\056\uffbd\060\uffbd\063" +
    "\uffbd\065\uffbd\001\002\000\060\013\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\022\uffbb\037\uffbb\040\100\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\055\uffbb\056\uffbb\060\uffbb\063\uffbb\065" +
    "\uffbb\001\002\000\060\013\uffb3\015\106\016\077\017\105" +
    "\020\111\022\uffb3\037\uffb3\040\100\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\112\055\uffb3\056\uffb3\060\uffb3\063\uffb3\065\uffb3\001" +
    "\002\000\060\013\uffb5\015\106\016\077\017\105\020\111" +
    "\022\uffb5\037\uffb5\040\100\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\112" +
    "\055\uffb5\056\uffb5\060\uffb5\063\uffb5\065\uffb5\001\002\000" +
    "\060\013\uffb2\015\106\016\077\017\105\020\111\022\uffb2" +
    "\037\uffb2\040\100\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\053\112\055\uffb2" +
    "\056\uffb2\060\uffb2\063\uffb2\065\uffb2\001\002\000\060\013" +
    "\uffb6\015\106\016\077\017\105\020\111\022\uffb6\037\uffb6" +
    "\040\100\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\112\055\uffb6\056\uffb6" +
    "\060\uffb6\063\uffb6\065\uffb6\001\002\000\056\013\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\037\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\060\uffb9\063\uffb9" +
    "\065\uffb9\001\002\000\060\013\uffbc\015\uffbc\016\uffbc\017" +
    "\105\020\111\022\uffbc\037\uffbc\040\100\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\112\055\uffbc\056\uffbc\060\uffbc\063\uffbc\065\uffbc" +
    "\001\002\000\060\013\uffae\015\106\016\077\017\105\020" +
    "\111\022\uffae\037\113\040\100\041\101\042\110\043\102" +
    "\044\uffae\045\uffae\046\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\112\055\103\056\104\060\uffae\063\uffae\065\uffae\001\002" +
    "\000\060\013\uffaf\015\106\016\077\017\105\020\111\022" +
    "\uffaf\037\113\040\100\041\101\042\110\043\102\044\uffaf" +
    "\045\uffaf\046\076\050\uffaf\051\uffaf\052\uffaf\053\112\055" +
    "\103\056\104\060\uffaf\063\uffaf\065\uffaf\001\002\000\024" +
    "\004\041\005\013\006\035\007\030\010\057\011\073\016" +
    "\042\021\005\047\026\001\002\000\024\004\041\005\013" +
    "\006\035\007\030\010\057\011\073\016\042\021\005\047" +
    "\026\001\002\000\042\015\106\016\077\017\105\020\111" +
    "\022\140\037\113\040\100\041\101\042\110\043\102\044" +
    "\114\045\075\046\076\053\112\055\103\056\104\001\002" +
    "\000\060\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\022" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055" +
    "\uffa5\056\uffa5\060\uffa5\063\uffa5\065\uffa5\001\002\000\042" +
    "\015\106\016\077\017\105\020\111\037\113\040\100\041" +
    "\101\042\110\043\102\044\114\045\075\046\076\053\112" +
    "\055\103\056\104\063\142\001\002\000\062\013\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056\uffa4\060\uffa4" +
    "\062\143\063\uffa4\065\uffa4\001\002\000\024\004\041\005" +
    "\013\006\035\007\030\010\057\011\073\016\042\021\005" +
    "\047\026\001\002\000\042\015\106\016\077\017\105\020" +
    "\111\037\113\040\100\041\101\042\110\043\102\044\114" +
    "\045\075\046\076\053\112\055\103\056\104\063\145\001" +
    "\002\000\060\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\022\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\055\uffa3\056\uffa3\060\uffa3\063\uffa3\065\uffa3\001\002\000" +
    "\004\013\151\001\002\000\004\013\150\001\002\000\074" +
    "\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\014\uffe5\016\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\047\uffe5\061\uffe5\066\uffe5\074\uffe5" +
    "\101\uffe5\102\uffe5\103\uffe5\001\002\000\074\002\uffe6\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\016\uffe6\021\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\047\uffe6\061\uffe6\066\uffe6\074\uffe6\101\uffe6\102" +
    "\uffe6\103\uffe6\001\002\000\004\002\001\001\002\000\016" +
    "\024\020\025\014\026\032\027\007\030\060\074\045\001" +
    "\002\000\004\056\155\001\002\000\004\011\156\001\002" +
    "\000\004\052\157\001\002\000\004\067\160\001\002\000" +
    "\004\066\161\001\002\000\004\021\162\001\002\000\004" +
    "\022\163\001\002\000\004\013\164\001\002\000\074\002" +
    "\uffca\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\014\uffca\016\uffca\021\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\047\uffca\061\uffca\066\uffca\074\uffca\101" +
    "\uffca\102\uffca\103\uffca\001\002\000\024\004\041\005\013" +
    "\006\035\007\030\010\057\011\073\016\042\021\005\047" +
    "\026\001\002\000\042\015\106\016\077\017\105\020\111" +
    "\022\167\037\113\040\100\041\101\042\110\043\102\044" +
    "\114\045\075\046\076\053\112\055\103\056\104\001\002" +
    "\000\004\060\170\001\002\000\070\003\040\004\041\005" +
    "\013\006\035\007\030\010\057\011\034\012\031\014\011" +
    "\016\042\021\005\024\020\025\014\026\032\027\007\030" +
    "\060\031\033\033\025\034\052\035\023\036\064\047\026" +
    "\066\053\074\045\101\037\102\044\103\017\001\002\000" +
    "\072\003\040\004\041\005\013\006\035\007\030\010\057" +
    "\011\034\012\031\014\011\016\042\021\005\024\020\025" +
    "\014\026\032\027\007\030\060\031\033\033\025\034\052" +
    "\035\023\036\064\047\026\061\172\066\053\074\045\101" +
    "\037\102\044\103\017\001\002\000\074\002\uffd3\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\014\uffd3\016\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\047\uffd3\061\uffd3\066\uffd3\074\uffd3\101\uffd3\102\uffd3" +
    "\103\uffd3\001\002\000\074\002\uffd5\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\016\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\047\uffd5" +
    "\061\uffd5\066\uffd5\074\uffd5\101\uffd5\102\uffd5\103\uffd5\001" +
    "\002\000\060\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\022\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\055\uffbe\056\uffbe\060\uffbe\063\uffbe\065\uffbe\001\002\000" +
    "\074\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\014\uffec\016\uffec\021\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\047\uffec\061\uffec\066\uffec\074" +
    "\uffec\101\uffec\102\uffec\103\uffec\001\002\000\004\021\177" +
    "\001\002\000\026\004\041\005\013\006\035\007\030\010" +
    "\057\011\073\016\042\021\005\022\200\047\026\001\002" +
    "\000\004\013\207\001\002\000\006\022\204\065\203\001" +
    "\002\000\044\015\106\016\077\017\105\020\111\022\uffdd" +
    "\037\113\040\100\041\101\042\110\043\102\044\114\045" +
    "\075\046\076\053\112\055\103\056\104\065\uffdd\001\002" +
    "\000\024\004\041\005\013\006\035\007\030\010\057\011" +
    "\073\016\042\021\005\047\026\001\002\000\004\013\205" +
    "\001\002\000\074\002\uffe0\003\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\016\uffe0" +
    "\021\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\047\uffe0\061\uffe0" +
    "\066\uffe0\074\uffe0\101\uffe0\102\uffe0\103\uffe0\001\002\000" +
    "\044\015\106\016\077\017\105\020\111\022\uffde\037\113" +
    "\040\100\041\101\042\110\043\102\044\114\045\075\046" +
    "\076\053\112\055\103\056\104\065\uffde\001\002\000\074" +
    "\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\014\uffdf\016\uffdf\021\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\047\uffdf\061\uffdf\066\uffdf\074\uffdf" +
    "\101\uffdf\102\uffdf\103\uffdf\001\002\000\006\070\236\071" +
    "\237\001\002\000\024\004\041\005\013\006\035\007\030" +
    "\010\057\011\073\016\042\021\005\047\026\001\002\000" +
    "\024\004\041\005\013\006\035\007\030\010\057\011\073" +
    "\016\042\021\005\047\026\001\002\000\024\004\041\005" +
    "\013\006\035\007\030\010\057\011\073\016\042\021\005" +
    "\047\026\001\002\000\042\015\106\016\077\017\105\020" +
    "\111\022\215\037\113\040\100\041\101\042\110\043\102" +
    "\044\114\045\075\046\076\053\112\055\103\056\104\001" +
    "\002\000\046\015\uffa5\016\uffa5\017\uffa5\020\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\050\uffa5\051\uffa5\052\216\053\uffa5\055\uffa5\056\uffa5" +
    "\001\002\000\024\004\041\005\013\006\035\007\030\010" +
    "\057\011\073\016\042\021\005\047\026\001\002\000\042" +
    "\013\220\015\106\016\077\017\105\020\111\037\113\040" +
    "\100\041\101\042\110\043\102\044\114\045\075\046\076" +
    "\053\112\055\103\056\104\001\002\000\074\002\uffc9\003" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\016\uffc9\021\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\047\uffc9\061\uffc9\066\uffc9\074\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\001\002\000\042\015\106\016\077\017\105" +
    "\020\111\037\113\040\100\041\101\042\110\043\102\044" +
    "\114\045\075\046\076\053\112\055\103\056\104\063\222" +
    "\001\002\000\050\015\uffa4\016\uffa4\017\uffa4\020\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\050\uffa4\051\uffa4\052\223\053\uffa4\055\uffa4\056" +
    "\uffa4\062\224\001\002\000\024\004\041\005\013\006\035" +
    "\007\030\010\057\011\073\016\042\021\005\047\026\001" +
    "\002\000\024\004\041\005\013\006\035\007\030\010\057" +
    "\011\073\016\042\021\005\047\026\001\002\000\042\015" +
    "\106\016\077\017\105\020\111\037\113\040\100\041\101" +
    "\042\110\043\102\044\114\045\075\046\076\053\112\055" +
    "\103\056\104\063\226\001\002\000\046\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052\227" +
    "\053\uffa3\055\uffa3\056\uffa3\001\002\000\024\004\041\005" +
    "\013\006\035\007\030\010\057\011\073\016\042\021\005" +
    "\047\026\001\002\000\042\013\231\015\106\016\077\017" +
    "\105\020\111\037\113\040\100\041\101\042\110\043\102" +
    "\044\114\045\075\046\076\053\112\055\103\056\104\001" +
    "\002\000\074\002\uffbf\003\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\016\uffbf\021" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\047\uffbf\061\uffbf\066" +
    "\uffbf\074\uffbf\101\uffbf\102\uffbf\103\uffbf\001\002\000\042" +
    "\013\233\015\106\016\077\017\105\020\111\037\113\040" +
    "\100\041\101\042\110\043\102\044\114\045\075\046\076" +
    "\053\112\055\103\056\104\001\002\000\074\002\uffc0\003" +
    "\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\014\uffc0\016\uffc0\021\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\047\uffc0\061\uffc0\066\uffc0\074\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\001\002\000\042\013\235\015\106\016\077" +
    "\017\105\020\111\037\113\040\100\041\101\042\110\043" +
    "\102\044\114\045\075\046\076\053\112\055\103\056\104" +
    "\001\002\000\074\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\016\uffe7" +
    "\021\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\047\uffe7\061\uffe7" +
    "\066\uffe7\074\uffe7\101\uffe7\102\uffe7\103\uffe7\001\002\000" +
    "\004\021\244\001\002\000\004\021\240\001\002\000\024" +
    "\004\041\005\013\006\035\007\030\010\057\011\073\016" +
    "\042\021\005\047\026\001\002\000\042\015\106\016\077" +
    "\017\105\020\111\022\242\037\113\040\100\041\101\042" +
    "\110\043\102\044\114\045\075\046\076\053\112\055\103" +
    "\056\104\001\002\000\004\013\243\001\002\000\074\002" +
    "\uffc7\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\014\uffc7\016\uffc7\021\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\047\uffc7\061\uffc7\066\uffc7\074\uffc7\101" +
    "\uffc7\102\uffc7\103\uffc7\001\002\000\024\004\041\005\013" +
    "\006\035\007\030\010\057\011\073\016\042\021\005\047" +
    "\026\001\002\000\042\015\106\016\077\017\105\020\111" +
    "\022\246\037\113\040\100\041\101\042\110\043\102\044" +
    "\114\045\075\046\076\053\112\055\103\056\104\001\002" +
    "\000\004\013\247\001\002\000\074\002\uffc8\003\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\014\uffc8\016\uffc8\021\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\047\uffc8\061\uffc8\066\uffc8\074\uffc8\101\uffc8\102\uffc8\103" +
    "\uffc8\001\002\000\024\004\041\005\013\006\035\007\030" +
    "\010\057\011\073\016\042\021\005\047\026\001\002\000" +
    "\042\015\106\016\077\017\105\020\111\022\252\037\113" +
    "\040\100\041\101\042\110\043\102\044\114\045\075\046" +
    "\076\053\112\055\103\056\104\001\002\000\004\060\253" +
    "\001\002\000\070\003\040\004\041\005\013\006\035\007" +
    "\030\010\057\011\034\012\031\014\011\016\042\021\005" +
    "\024\020\025\014\026\032\027\007\030\060\031\033\033" +
    "\025\034\052\035\023\036\064\047\026\066\053\074\045" +
    "\101\037\102\044\103\017\001\002\000\072\003\040\004" +
    "\041\005\013\006\035\007\030\010\057\011\034\012\031" +
    "\014\011\016\042\021\005\024\020\025\014\026\032\027" +
    "\007\030\060\031\033\033\025\034\052\035\023\036\064" +
    "\047\026\061\255\066\053\074\045\101\037\102\044\103" +
    "\017\001\002\000\076\002\uffdc\003\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\016" +
    "\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\256\033\uffdc\034\uffdc\035\uffdc\036\uffdc\047" +
    "\uffdc\061\uffdc\066\uffdc\074\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\001\002\000\006\031\033\060\260\001\002\000\074\002" +
    "\uffda\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\014\uffda\016\uffda\021\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\047\uffda\061\uffda\066\uffda\074\uffda\101" +
    "\uffda\102\uffda\103\uffda\001\002\000\070\003\040\004\041" +
    "\005\013\006\035\007\030\010\057\011\034\012\031\014" +
    "\011\016\042\021\005\024\020\025\014\026\032\027\007" +
    "\030\060\031\033\033\025\034\052\035\023\036\064\047" +
    "\026\066\053\074\045\101\037\102\044\103\017\001\002" +
    "\000\072\003\040\004\041\005\013\006\035\007\030\010" +
    "\057\011\034\012\031\014\011\016\042\021\005\024\020" +
    "\025\014\026\032\027\007\030\060\031\033\033\025\034" +
    "\052\035\023\036\064\047\026\061\262\066\053\074\045" +
    "\101\037\102\044\103\017\001\002\000\074\002\uffdb\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\014\uffdb\016\uffdb\021\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\047\uffdb\061\uffdb\066\uffdb\074\uffdb\101\uffdb\102" +
    "\uffdb\103\uffdb\001\002\000\004\057\264\001\002\000\016" +
    "\024\020\025\014\026\032\027\007\030\060\074\045\001" +
    "\002\000\010\013\266\052\267\062\270\001\002\000\074" +
    "\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\014\uffe8\016\uffe8\021\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\047\uffe8\061\uffe8\066\uffe8\074\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\001\002\000\024\004\041\005" +
    "\013\006\035\007\030\010\057\011\073\016\042\021\005" +
    "\047\026\001\002\000\004\063\271\001\002\000\006\052" +
    "\272\062\273\001\002\000\004\062\314\001\002\000\004" +
    "\063\274\001\002\000\004\052\275\001\002\000\004\062" +
    "\276\001\002\000\004\062\300\001\002\000\006\063\307" +
    "\065\306\001\002\000\024\004\041\005\013\006\035\007" +
    "\030\010\057\011\073\016\042\021\005\047\026\001\002" +
    "\000\006\063\304\065\303\001\002\000\044\015\106\016" +
    "\077\017\105\020\111\037\113\040\100\041\101\042\110" +
    "\043\102\044\114\045\075\046\076\053\112\055\103\056" +
    "\104\063\uffc3\065\uffc3\001\002\000\024\004\041\005\013" +
    "\006\035\007\030\010\057\011\073\016\042\021\005\047" +
    "\026\001\002\000\006\063\uffc1\065\uffc1\001\002\000\044" +
    "\015\106\016\077\017\105\020\111\037\113\040\100\041" +
    "\101\042\110\043\102\044\114\045\075\046\076\053\112" +
    "\055\103\056\104\063\uffc4\065\uffc4\001\002\000\004\062" +
    "\311\001\002\000\004\013\310\001\002\000\074\002\uffc5" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\014\uffc5\016\uffc5\021\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\047\uffc5\061\uffc5\066\uffc5\074\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\001\002\000\024\004\041\005\013\006" +
    "\035\007\030\010\057\011\073\016\042\021\005\047\026" +
    "\001\002\000\006\063\313\065\303\001\002\000\006\063" +
    "\uffc2\065\uffc2\001\002\000\024\004\041\005\013\006\035" +
    "\007\030\010\057\011\073\016\042\021\005\047\026\001" +
    "\002\000\006\063\316\065\303\001\002\000\004\013\317" +
    "\001\002\000\074\002\uffc6\003\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\016\uffc6" +
    "\021\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\047\uffc6\061\uffc6" +
    "\066\uffc6\074\uffc6\101\uffc6\102\uffc6\103\uffc6\001\002\000" +
    "\042\013\321\015\106\016\077\017\105\020\111\037\113" +
    "\040\100\041\101\042\110\043\102\044\114\045\075\046" +
    "\076\053\112\055\103\056\104\001\002\000\074\002\uffe9" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\014\uffe9\016\uffe9\021\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\047\uffe9\061\uffe9\066\uffe9\074\uffe9\101\uffe9" +
    "\102\uffe9\103\uffe9\001\002\000\060\013\uffb1\015\106\016" +
    "\077\017\105\020\111\022\uffb1\037\113\040\100\041\101" +
    "\042\110\043\102\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\112\055\103\056\104\060\uffb1\063\uffb1" +
    "\065\uffb1\001\002\000\042\015\106\016\077\017\105\020" +
    "\111\037\113\040\100\041\101\042\110\043\102\044\114" +
    "\045\075\046\076\053\112\055\103\056\104\060\324\001" +
    "\002\000\026\004\041\005\013\006\035\007\030\010\057" +
    "\011\073\016\042\021\005\047\026\054\327\001\002\000" +
    "\030\004\041\005\013\006\035\007\030\010\057\011\073" +
    "\016\042\021\005\047\026\054\346\061\344\001\002\000" +
    "\030\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\016\uffcd\021\uffcd\047\uffcd\054\uffcd\061\uffcd\001\002\000" +
    "\006\052\336\061\337\001\002\000\042\015\106\016\077" +
    "\017\105\020\111\037\113\040\100\041\101\042\110\043" +
    "\102\044\114\045\075\046\076\052\331\053\112\055\103" +
    "\056\104\001\002\000\004\056\332\001\002\000\004\060" +
    "\333\001\002\000\070\003\040\004\041\005\013\006\035" +
    "\007\030\010\057\011\034\012\031\014\011\016\042\021" +
    "\005\024\020\025\014\026\032\027\007\030\060\031\033" +
    "\033\025\034\052\035\023\036\064\047\026\066\053\074" +
    "\045\101\037\102\044\103\017\001\002\000\072\003\040" +
    "\004\041\005\013\006\035\007\030\010\057\011\034\012" +
    "\031\014\011\016\042\021\005\024\020\025\014\026\032" +
    "\027\007\030\060\031\033\033\025\034\052\035\023\036" +
    "\064\047\026\061\335\066\053\074\045\101\037\102\044" +
    "\103\017\001\002\000\030\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\016\uffcc\021\uffcc\047\uffcc\054\uffcc" +
    "\061\uffcc\001\002\000\004\056\340\001\002\000\074\002" +
    "\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\014\uffcf\016\uffcf\021\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\047\uffcf\061\uffcf\066\uffcf\074\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\001\002\000\004\060\341\001\002" +
    "\000\070\003\040\004\041\005\013\006\035\007\030\010" +
    "\057\011\034\012\031\014\011\016\042\021\005\024\020" +
    "\025\014\026\032\027\007\030\060\031\033\033\025\034" +
    "\052\035\023\036\064\047\026\066\053\074\045\101\037" +
    "\102\044\103\017\001\002\000\072\003\040\004\041\005" +
    "\013\006\035\007\030\010\057\011\034\012\031\014\011" +
    "\016\042\021\005\024\020\025\014\026\032\027\007\030" +
    "\060\031\033\033\025\034\052\035\023\036\064\047\026" +
    "\061\343\066\053\074\045\101\037\102\044\103\017\001" +
    "\002\000\030\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\016\uffcb\021\uffcb\047\uffcb\054\uffcb\061\uffcb\001" +
    "\002\000\074\002\uffd0\003\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\016\uffd0\021" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\047\uffd0\061\uffd0\066" +
    "\uffd0\074\uffd0\101\uffd0\102\uffd0\103\uffd0\001\002\000\030" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\016" +
    "\uffce\021\uffce\047\uffce\054\uffce\061\uffce\001\002\000\006" +
    "\052\336\061\347\001\002\000\074\002\uffd1\003\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\014\uffd1\016\uffd1\021\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\047\uffd1\061\uffd1\066\uffd1\074\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\001\002\000\024\004\041\005\013\006\035\007\030" +
    "\010\057\011\351\016\042\021\005\047\026\001\002\000" +
    "\052\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\136\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\052\211\053\uffa6\055\uffa6\056\uffa6" +
    "\062\135\001\002\000\024\004\041\005\013\006\035\007" +
    "\030\010\057\011\073\016\042\021\005\047\026\001\002" +
    "\000\042\013\354\015\106\016\077\017\105\020\111\037" +
    "\113\040\100\041\101\042\110\043\102\044\114\045\075" +
    "\046\076\053\112\055\103\056\104\001\002\000\024\004" +
    "\041\005\013\006\035\007\030\010\057\011\356\016\042" +
    "\021\005\047\026\001\002\000\004\022\364\001\002\000" +
    "\052\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\136\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\052\362\053\uffa6\055\uffa6\056\uffa6" +
    "\062\135\001\002\000\044\015\106\016\077\017\105\020" +
    "\111\037\113\040\100\041\101\042\110\043\102\044\114" +
    "\045\075\046\076\050\360\051\361\053\112\055\103\056" +
    "\104\001\002\000\004\022\uffd7\001\002\000\004\022\uffd6" +
    "\001\002\000\024\004\041\005\013\006\035\007\030\010" +
    "\057\011\073\016\042\021\005\047\026\001\002\000\042" +
    "\015\106\016\077\017\105\020\111\022\uffd8\037\113\040" +
    "\100\041\101\042\110\043\102\044\114\045\075\046\076" +
    "\053\112\055\103\056\104\001\002\000\004\060\365\001" +
    "\002\000\070\003\040\004\041\005\013\006\035\007\030" +
    "\010\057\011\034\012\031\014\011\016\042\021\005\024" +
    "\020\025\014\026\032\027\007\030\060\031\033\033\025" +
    "\034\052\035\023\036\064\047\026\066\053\074\045\101" +
    "\037\102\044\103\017\001\002\000\072\003\040\004\041" +
    "\005\013\006\035\007\030\010\057\011\034\012\031\014" +
    "\011\016\042\021\005\024\020\025\014\026\032\027\007" +
    "\030\060\031\033\033\025\034\052\035\023\036\064\047" +
    "\026\061\367\066\053\074\045\101\037\102\044\103\017" +
    "\001\002\000\074\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014\uffd9\016\uffd9" +
    "\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\047\uffd9\061\uffd9" +
    "\066\uffd9\074\uffd9\101\uffd9\102\uffd9\103\uffd9\001\002\000" +
    "\074\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\014\uffd4\016\uffd4\021\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\047\uffd4\061\uffd4\066\uffd4\074" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\001\002\000\024\004\041" +
    "\005\013\006\035\007\030\010\057\011\073\016\042\021" +
    "\005\047\026\001\002\000\042\015\106\016\077\017\105" +
    "\020\111\022\373\037\113\040\100\041\101\042\110\043" +
    "\102\044\114\045\075\046\076\053\112\055\103\056\104" +
    "\001\002\000\004\013\374\001\002\000\074\002\uffea\003" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\014\uffea\016\uffea\021\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\047\uffea\061\uffea\066\uffea\074\uffea\101\uffea\102" +
    "\uffea\103\uffea\001\002\000\004\021\376\001\002\000\020" +
    "\022\u0100\024\020\025\014\026\032\027\007\030\060\074" +
    "\045\001\002\000\006\022\u0107\065\u0106\001\002\000\004" +
    "\060\u0103\001\002\000\004\011\u0102\001\002\000\006\022" +
    "\uffe1\065\uffe1\001\002\000\070\003\040\004\041\005\013" +
    "\006\035\007\030\010\057\011\034\012\031\014\011\016" +
    "\042\021\005\024\020\025\014\026\032\027\007\030\060" +
    "\031\033\033\025\034\052\035\023\036\064\047\026\066" +
    "\053\074\045\101\037\102\044\103\017\001\002\000\072" +
    "\003\040\004\041\005\013\006\035\007\030\010\057\011" +
    "\034\012\031\014\011\016\042\021\005\024\020\025\014" +
    "\026\032\027\007\030\060\031\033\033\025\034\052\035" +
    "\023\036\064\047\026\061\u0105\066\053\074\045\101\037" +
    "\102\044\103\017\001\002\000\074\002\uffe3\003\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\014\uffe3\016\uffe3\021\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\047\uffe3\061\uffe3\066\uffe3\074\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\001\002\000\016\024\020\025\014\026\032\027\007" +
    "\030\060\074\045\001\002\000\004\060\u0108\001\002\000" +
    "\070\003\040\004\041\005\013\006\035\007\030\010\057" +
    "\011\034\012\031\014\011\016\042\021\005\024\020\025" +
    "\014\026\032\027\007\030\060\031\033\033\025\034\052" +
    "\035\023\036\064\047\026\066\053\074\045\101\037\102" +
    "\044\103\017\001\002\000\072\003\040\004\041\005\013" +
    "\006\035\007\030\010\057\011\034\012\031\014\011\016" +
    "\042\021\005\024\020\025\014\026\032\027\007\030\060" +
    "\031\033\033\025\034\052\035\023\036\064\047\026\061" +
    "\u010a\066\053\074\045\101\037\102\044\103\017\001\002" +
    "\000\074\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\016\uffe4\021\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\047\uffe4\061\uffe4\066\uffe4" +
    "\074\uffe4\101\uffe4\102\uffe4\103\uffe4\001\002\000\004\011" +
    "\u010c\001\002\000\006\022\uffe2\065\uffe2\001\002\000\042" +
    "\015\106\016\077\017\105\020\111\022\u0111\037\113\040" +
    "\100\041\101\042\110\043\102\044\114\045\075\046\076" +
    "\053\112\055\103\056\104\001\002\000\004\022\u010f\001" +
    "\002\000\024\004\041\005\013\006\035\007\030\010\057" +
    "\011\073\016\042\021\005\047\026\001\002\000\060\013" +
    "\uffac\015\106\016\077\017\105\020\111\022\uffac\037\113" +
    "\040\100\041\101\042\110\043\102\044\114\045\075\046" +
    "\076\050\uffac\051\uffac\052\uffac\053\112\055\103\056\104" +
    "\060\uffac\063\uffac\065\uffac\001\002\000\060\013\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\022\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\060\uffad" +
    "\063\uffad\065\uffad\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\056\002\060\003\023\004\020\005\061\006" +
    "\046\007\045\010\053\011\055\012\007\013\050\015\026" +
    "\016\062\021\005\022\011\023\021\024\014\026\042\030" +
    "\035\031\047\032\054\033\003\034\015\001\001\000\002" +
    "\001\001\000\006\005\u010c\021\u010d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\067\005\061\006\046\007\045\010\053" +
    "\011\055\012\007\013\050\015\026\016\062\021\005\022" +
    "\011\023\021\024\014\026\042\030\035\031\047\032\054" +
    "\033\003\034\015\001\001\000\004\005\322\001\001\000" +
    "\004\005\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\065\004\020\005\061\006\046\007\045\010\053\011\055" +
    "\012\007\013\050\015\026\016\062\021\005\022\011\023" +
    "\021\024\014\026\042\030\035\031\047\032\054\033\003" +
    "\034\015\001\001\000\052\004\067\005\061\006\046\007" +
    "\045\010\053\011\055\012\007\013\050\015\026\016\062" +
    "\021\005\022\011\023\021\024\014\026\042\030\035\031" +
    "\047\032\054\033\003\034\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\133" +
    "\001\001\000\004\005\132\001\001\000\004\005\131\001" +
    "\001\000\004\005\130\001\001\000\004\005\127\001\001" +
    "\000\004\005\126\001\001\000\004\005\125\001\001\000" +
    "\004\005\124\001\001\000\004\005\123\001\001\000\004" +
    "\005\122\001\001\000\002\001\001\000\004\005\120\001" +
    "\001\000\004\005\117\001\001\000\004\005\116\001\001" +
    "\000\004\005\115\001\001\000\004\005\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\140\001\001\000\004\005\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\170\004\020\005\061\006\046\007\045\010\053" +
    "\011\055\012\007\013\050\015\026\016\062\021\005\022" +
    "\011\023\021\024\014\026\042\030\035\031\047\032\054" +
    "\033\003\034\015\001\001\000\052\004\067\005\061\006" +
    "\046\007\045\010\053\011\055\012\007\013\050\015\026" +
    "\016\062\021\005\022\011\023\021\024\014\026\042\030" +
    "\035\031\047\032\054\033\003\034\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\201\027\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\233\001\001\000\004\005\220\001\001\000\004" +
    "\005\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\231\001" +
    "\001\000\004\005\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\253\004\020\005\061\006\046\007\045\010\053" +
    "\011\055\012\007\013\050\015\026\016\062\021\005\022" +
    "\011\023\021\024\014\026\042\030\035\031\047\032\054" +
    "\033\003\034\015\001\001\000\052\004\067\005\061\006" +
    "\046\007\045\010\053\011\055\012\007\013\050\015\026" +
    "\016\062\021\005\022\011\023\021\024\014\026\042\030" +
    "\035\031\047\032\054\033\003\034\015\001\001\000\002" +
    "\001\001\000\004\011\256\001\001\000\002\001\001\000" +
    "\054\003\260\004\020\005\061\006\046\007\045\010\053" +
    "\011\055\012\007\013\050\015\026\016\062\021\005\022" +
    "\011\023\021\024\014\026\042\030\035\031\047\032\054" +
    "\033\003\034\015\001\001\000\052\004\067\005\061\006" +
    "\046\007\045\010\053\011\055\012\007\013\050\015\026" +
    "\016\062\021\005\022\011\023\021\024\014\026\042\030" +
    "\035\031\047\032\054\033\003\034\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\276\001\001\000\002\001\001\000\006\005\301\035" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\301\035\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\301\035\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\327\017\324\020\325\001\001\000\006\005\327\020" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\333\004\020\005\061\006\046\007\045\010\053\011\055" +
    "\012\007\013\050\015\026\016\062\021\005\022\011\023" +
    "\021\024\014\026\042\030\035\031\047\032\054\033\003" +
    "\034\015\001\001\000\052\004\067\005\061\006\046\007" +
    "\045\010\053\011\055\012\007\013\050\015\026\016\062" +
    "\021\005\022\011\023\021\024\014\026\042\030\035\031" +
    "\047\032\054\033\003\034\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\341\004\020\005\061\006\046\007\045\010\053" +
    "\011\055\012\007\013\050\015\026\016\062\021\005\022" +
    "\011\023\021\024\014\026\042\030\035\031\047\032\054" +
    "\033\003\034\015\001\001\000\052\004\067\005\061\006" +
    "\046\007\045\010\053\011\055\012\007\013\050\015\026" +
    "\016\062\021\005\022\011\023\021\024\014\026\042\030" +
    "\035\031\047\032\054\033\003\034\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\061\007\351\001\001" +
    "\000\002\001\001\000\004\005\352\001\001\000\002\001" +
    "\001\000\006\005\356\014\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\365\004\020\005\061\006" +
    "\046\007\045\010\053\011\055\012\007\013\050\015\026" +
    "\016\062\021\005\022\011\023\021\024\014\026\042\030" +
    "\035\031\047\032\054\033\003\034\015\001\001\000\052" +
    "\004\067\005\061\006\046\007\045\010\053\011\055\012" +
    "\007\013\050\015\026\016\062\021\005\022\011\023\021" +
    "\024\014\026\042\030\035\031\047\032\054\033\003\034" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\u0100\025\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\u0103\004\020\005\061" +
    "\006\046\007\045\010\053\011\055\012\007\013\050\015" +
    "\026\016\062\021\005\022\011\023\021\024\014\026\042" +
    "\030\035\031\047\032\054\033\003\034\015\001\001\000" +
    "\052\004\067\005\061\006\046\007\045\010\053\011\055" +
    "\012\007\013\050\015\026\016\062\021\005\022\011\023" +
    "\021\024\014\026\042\030\035\031\047\032\054\033\003" +
    "\034\015\001\001\000\002\001\001\000\004\021\u010a\001" +
    "\001\000\002\001\001\000\054\003\u0108\004\020\005\061" +
    "\006\046\007\045\010\053\011\055\012\007\013\050\015" +
    "\026\016\062\021\005\022\011\023\021\024\014\026\042" +
    "\030\035\031\047\032\054\033\003\034\015\001\001\000" +
    "\052\004\067\005\061\006\046\007\045\010\053\011\055" +
    "\012\007\013\050\015\026\016\062\021\005\022\011\023" +
    "\021\024\014\026\042\030\035\031\047\032\054\033\003" +
    "\034\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u010f\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s) {this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s ){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

   

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT=a;      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= START 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DECLARACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= NATIVO_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= ASIGNACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= error FININSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    RESULT = new Print(aleft, aright, a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(c, aleft, aright, b, d, a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(c, aleft, aright, b, a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= ID IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= EXPRESION INCREMENTO FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Incremento(aleft, aright, a);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= EXPRESION DECREMENTO FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Decremento(aleft, aright, a);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(a, aleft, aright, b, p, c);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(a, aleft, aright, b, new LinkedList<HashMap>(),c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                            var hm2 = new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>();
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id", b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // START ::= STARTWITH ID PAR1 PARAMSCALL PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new StartWith(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // START ::= STARTWITH ID PAR1 PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = new StartWith(aleft, aright, a, new LinkedList<Instruccion>());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);    
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>();
                                                    RESULT.add(a);  
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new If(aleft, aright, a, b);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new IfElse(aleft, aright, a, b, c);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new IfElseIf(aleft, aright, a, b, c);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FININSTRUCCION ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new For(aleft, aright, a, b, c, d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ACTUALIZA_FOR ::= EXPRESION INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Incremento(aleft, aright, a);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ACTUALIZA_FOR ::= EXPRESION DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Decremento(aleft, aright, a);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BREAKK ::= BREAK FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTINUEE ::= CONTINUE FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new While(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    RESULT = new DoWhile(aleft, aright, a, b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, b, (Caso) c);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, b, null);           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SMATCH ::= MATCH EXPRESION LLAVE1 DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     RESULT = new Match(aleft, aright, a, new LinkedList<Caso>(), (Caso) c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASO ::= EXPRESION IGUAL MAYORQUE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Caso(a, b, true);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASO ::= DEFAULT IGUAL MAYORQUE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Caso(null, b, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_LIST ::= LIST MENORQUE TIPOS MAYORQUE ID IGUAL NEW LIST PAR1 PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		      RESULT = new DeclaracionList(a, aleft, aright, b);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION_LIST ::= ID PAR1 EXPRESION PAR2 IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new AsignacionList(aleft, aright, a, b, c);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_LIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NATIVO_LIST ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new Append(aleft, aright, a, b);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIVO_LIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NATIVO_LIST ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new Remove(aleft, aright, a, b);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NATIVO_LIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_VECTOR ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCH1 CORCH2 IGUAL CORCH1 LISTAVALORES1 CORCH2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new DeclaracionVector(c, aleft, aright, a, b, 1, d);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_VECTOR ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCH1 CORCH2 CORCH1 CORCH2 IGUAL CORCH1 LISTAVALORES2 CORCH2 FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new DeclaracionVector(c, aleft, aright, a, b, 2, d);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTAVALORES1 ::= LISTAVALORES1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
                                                             RESULT.add(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTAVALORES1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<Instruccion>(); 
                                                             RESULT.add(a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTAVALORES2 ::= LISTAVALORES2 COMA CORCH1 LISTAVALORES1 CORCH2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
                                                                            RESULT.addAll(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTAVALORES2 ::= CORCH1 LISTAVALORES1 CORCH2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<>(); 
                                                                            RESULT.addAll(a);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION_VECTOR ::= ID CORCH1 EXPRESION CORCH2 IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVector(aleft, aright, a, b, null, c);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION_VECTOR ::= ID CORCH1 EXPRESION CORCH2 CORCH1 EXPRESION CORCH2 IGUAL EXPRESION FININSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AsignacionVector(aleft, aright, a, b, c, d);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, OperadoresAritmeticos.NEGACION, a);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.SUMA);                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.RESTA);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MULTIPLICAR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MULTIPLICACION);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.DIVISION);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.POTENCIA);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MODULO);                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.IGUALACION);            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION DIFERENCIACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.DIFERENCIACION);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORQUE);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION MENORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORIGUALQUE);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORQUE);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION MAYORIGUALQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORIGUALQUE);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, OperadoresLogicos.NOT, a);                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.OR);                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.AND);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.XOR);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;                                                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Casteo(a, aleft, aright, b);                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.ENTERO), aleft, aright, Integer.parseInt(a));           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.DECIMAL), aleft, aright, new Double(a));                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.CADENA), aleft, aright, a);                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.CARACTER), aleft, aright, a);                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(new Tipo(tipoDato.BOOLEANO), aleft, aright, Boolean.parseBoolean(a));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AccesoVar(aleft, aright, a);                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= ID PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoList(aleft, aright, a, b);                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ID CORCH1 EXPRESION CORCH2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVector(aleft, aright, a, b, null);                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= ID CORCH1 EXPRESION CORCH2 CORCH1 EXPRESION CORCH2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new AccesoVector(aleft, aright, a, b, c);                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(tipoDato.VOID);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
