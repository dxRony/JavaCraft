package olc1_vj24_3363565520917.backend.analisis;

//importaciones 
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_vj24_3363565520917.backend.abstracto.Instruccion;
import olc1_vj24_3363565520917.backend.simbolo.Tipo;
import olc1_vj24_3363565520917.backend.simbolo.tipoDato;
import olc1_vj24_3363565520917.backend.excepciones.Errores;

//instrucciones
import olc1_vj24_3363565520917.backend.instrucciones.Print;
import olc1_vj24_3363565520917.backend.instrucciones.Declaracion;
import olc1_vj24_3363565520917.backend.instrucciones.AsignacionVar;
import olc1_vj24_3363565520917.backend.instrucciones.If;
import olc1_vj24_3363565520917.backend.instrucciones.IfElse;
import olc1_vj24_3363565520917.backend.instrucciones.IfElseIf;

//expresiones
import olc1_vj24_3363565520917.backend.expresiones.Nativo;
import olc1_vj24_3363565520917.backend.expresiones.Aritmeticas;
import olc1_vj24_3363565520917.backend.expresiones.Relacionales;
import olc1_vj24_3363565520917.backend.expresiones.Logicos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresAritmeticos;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresRelacionales;
import olc1_vj24_3363565520917.backend.expresiones.OperadoresLogicos;
import olc1_vj24_3363565520917.backend.expresiones.AccesoVar;
import olc1_vj24_3363565520917.backend.expresiones.Casteo;
import olc1_vj24_3363565520917.backend.expresiones.Incremento;
import olc1_vj24_3363565520917.backend.expresiones.Decremento;

//definiendo el parser
parser code
{:
    scanner s;
    parser(scanner s) {this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s ){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }
:}

action code 
{:   
:}
                                                                       
terminal String CADENA, ENTERO, DECIMAL, CARACTER, BOOLEANO, ID, MUTABILIDAD;
terminal FININSTRUCCION, IMPRIMIR, MAS, MENOS, MULTIPLICAR, DIVIDIR, PAR1, PAR2, UMENOS, INT, DOUBLE, BOOL;
terminal CHAR, STRING, IF, ELSE, MATCH, WHILE, FOR, DO, BREAK, IGUALACION, POTENCIA, DIFERENCIACION, MENORIGUALQUE, MAYORIGUALQUE;
terminal OR, AND, XOR, NOT, INCREMENTO, DECREMENTO, IGUAL, MODULO, DEFAULT, MENORQUE, MAYORQUE, DOSPUNTOS;
terminal LLAVE1, LLAVE2; 

nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion EXPRESION, DECLARACION, ASIGNACION, IMPRESION;
nonterminal Instruccion SIF;
nonterminal Tipo TIPOS;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUALACION, DIFERENCIACION, MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE;
precedence left MAS, MENOS;
precedence left MULTIPLICAR, DIVIDIR, MODULO;
precedence nonassoc POTENCIA;
precedence right UMENOS;      

start with INICIO;                                                      

INICIO ::= INSTRUCCIONES:a  {:      RESULT=a;      :}  
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b   {:  RESULT = a; RESULT.add(b);                     :}
                | INSTRUCCION:a                   {:  RESULT = new LinkedList<>(); RESULT.add(a);    :}
;

INSTRUCCION ::= IMPRESION:a                       {:  RESULT=a;    :}
            | DECLARACION:a                       {:  RESULT=a;    :}
            | ASIGNACION:a                        {:  RESULT=a;    :}
            | SIF:a                               {:  RESULT=a;    :}
            | error FININSTRUCCION
            | error        
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FININSTRUCCION   {:    RESULT = new Print(aleft, aright, a);     :}
;

DECLARACION ::= MUTABILIDAD:a ID:b DOSPUNTOS TIPOS:c IGUAL EXPRESION:d FININSTRUCCION {:  RESULT = new Declaracion(c, aleft, aright, b, d, a);  :}           
            | MUTABILIDAD:a ID:b DOSPUNTOS TIPOS:c FININSTRUCCION                     {:  RESULT = new Declaracion(c, aleft, aright, b, a);     :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FININSTRUCCION     {:  RESULT = new AsignacionVar(a, b, aleft, aright);       :}
            | EXPRESION:a INCREMENTO FININSTRUCCION      {:  RESULT = new Incremento(aleft, aright, a);             :}
            | EXPRESION:a DECREMENTO FININSTRUCCION      {:  RESULT = new Decremento(aleft, aright, a);             :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2                                    {:  RESULT = new If(aleft, aright, a, b);            :} 
    |   IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2 {:  RESULT = new IfElse(aleft, aright, a, b, c);     :}   
    |   IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE SIF:c                         {:  RESULT = new IfElseIf(aleft, aright, a, b, c);   :}            
; 

TIPOS ::= INT       {:  RESULT = new Tipo(tipoDato.ENTERO);     :}
        | DOUBLE    {:  RESULT = new Tipo(tipoDato.DECIMAL);    :}
        | STRING    {:  RESULT = new Tipo(tipoDato.CADENA);     :}
        | CHAR      {:  RESULT = new Tipo(tipoDato.CARACTER);   :}
        | BOOL      {:  RESULT = new Tipo(tipoDato.BOOLEANO);   :}
;

EXPRESION ::= MENOS EXPRESION:a                       {:  RESULT = new Aritmeticas(aleft, aright, OperadoresAritmeticos.NEGACION, a);            :}%prec UMENOS
            | EXPRESION:a MAS EXPRESION:b             {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.SUMA);             :}
            | EXPRESION:a MENOS EXPRESION:b           {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.RESTA);            :}
            | EXPRESION:a MULTIPLICAR EXPRESION:b     {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MULTIPLICACION);   :}
            | EXPRESION:a DIVIDIR EXPRESION:b         {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.DIVISION);         :}
            | EXPRESION:a POTENCIA EXPRESION:b        {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.POTENCIA);         :}
            | EXPRESION:a MODULO EXPRESION:b          {:  RESULT = new Aritmeticas(aleft, aright, a, b, OperadoresAritmeticos.MODULO);           :}            

            | EXPRESION:a IGUALACION EXPRESION:b      {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.IGUALACION);     :}
            | EXPRESION:a DIFERENCIACION EXPRESION:b  {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.DIFERENCIACION); :}
            | EXPRESION:a MENORQUE EXPRESION:b        {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORQUE);       :}
            | EXPRESION:a MENORIGUALQUE EXPRESION:b   {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MENORIGUALQUE);  :}
            | EXPRESION:a MAYORQUE EXPRESION:b        {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORQUE);       :}
            | EXPRESION:a MAYORIGUALQUE EXPRESION:b   {:  RESULT = new Relacionales(aleft, aright, a, b, OperadoresRelacionales.MAYORIGUALQUE);  :}

            | NOT EXPRESION:a                         {:  RESULT = new Logicos(aleft, aright, OperadoresLogicos.NOT, a);                         :}%prec NOT
            | EXPRESION:a OR EXPRESION:b              {:  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.OR);                       :}
            | EXPRESION:a AND EXPRESION:b             {:  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.AND);                      :}
            | EXPRESION:a XOR EXPRESION:b             {:  RESULT = new Logicos(aleft, aright, a, b, OperadoresLogicos.XOR);                      :}

            | PAR1 EXPRESION:a PAR2                   {:  RESULT = a;                                                                            :}

            | PAR1 TIPOS:a PAR2 EXPRESION:b           {:  RESULT = new Casteo(a, aleft, aright, b);                                              :}
            
            | ENTERO:a                                {:  RESULT = new Nativo(new Tipo(tipoDato.ENTERO), aleft, aright, Integer.parseInt(a));    :}
            | DECIMAL:a                               {:  RESULT = new Nativo(new Tipo(tipoDato.DECIMAL), aleft, aright, new Double(a));         :}
            | CADENA:a                                {:  RESULT = new Nativo(new Tipo(tipoDato.CADENA), aleft, aright, a);                      :}
            | CARACTER:a                              {:  RESULT = new Nativo(new Tipo(tipoDato.CARACTER), aleft, aright, a);                    :}
            | BOOLEANO:a                              {:  RESULT = new Nativo(new Tipo(tipoDato.BOOLEANO), aleft, aright, a);                    :}
            | ID:a                                    {:  RESULT = new AccesoVar(aleft, aright, a);                                              :}            
;